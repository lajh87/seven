---
title: "Military Sites from OSM"
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r, warning = FALSE, message = FALSE}
library(rnaturalearth)
library(sf)
library(ggplot2)
library(osmdata)
library(leaflet)
source("R/postgis.R")
```

# Geospatial Extent

## United Kingdom

```{r}
uk <- ne_countries(country = 'united kingdom') |>
  st_as_sf()

(p1 <- ggplot(uk) +
  geom_sf(alpha = 0.5) + 
  theme_minimal())

```

## Bounding Box

```{r}
(bbox_uk <- st_bbox(uk))

```

# Extract Data from Open Street Map

If we try extracting for the whole country then the server will timeout.

We therefore chunk it into bounding boxes.

## Generating Chunks

Create a grid over the uk

```{r}
g <- st_make_grid(uk, what = "polygons", n = 10) |> st_as_sf()
g_clipped <- g[uk,]

p1 + geom_sf(data = g_clipped, inherit.aes = FALSE, fill = NA, colour = "black")
```

Extract the bounding boxes

```{r}
bbox_g <- purrr::map(g_clipped$x, ~st_bbox(.x) |> as.numeric()) |>
  unlist() |> 
  matrix(ncol = 4, byrow = TRUE) |>
  dplyr::as_tibble() |>
  rlang::set_names(c("xmin", "ymin", "xmax", "ymax"))
```

## Extract Data

Loop through bounding box and extract open street map features with key = 'landuse' and value = 'military'.

### Landuse Military

```{r, eval = FALSE}
landuse_military <- purrr::map(1:nrow(bbox_g), ~{
  tryCatch({
    opq(bbox = as.numeric(bbox_g[.x,])) |>  
      add_osm_feature(key = "landuse", value = "military") |>
      osmdata_sf()
    }, error = function(e) {
    opq(bbox = as.numeric(bbox_g[.x,])) |>  
        add_osm_feature(key = "landuse", value = "military") |>
        osmdata_sf()
  }, finally = NA)
  })

any(purrr::map_lgl(landuse_military, ~any(is.na(.x)))) # check

```

### Military

```{r, eval = FALSE}
military <- purrr::map(1:nrow(bbox_g), ~{
  tryCatch({
    opq(bbox = as.numeric(bbox_g[.x,])) |>  
      add_osm_feature(key = "military") |>
      osmdata_sf()
    }, error = function(e) {
    opq(bbox = as.numeric(bbox_g[.x,])) |>  
        add_osm_feature(key = "military") |>
        osmdata_sf()
  }, finally = NA)
  })

any(purrr::map_lgl(military, ~any(is.na(.x)))) # check

```

### Process Data

```{r, eval = FALSE}
landuse_military_collection <- landuse_military |> 
  purrr::map_df(~.x$osm_polygons) |>
  dplyr::bind_rows(landuse_military |> 
                     purrr::map_df(~.x$osm_multipolygons)) |>
  dplyr::bind_rows(
    landuse_military |> 
      purrr::map_df(~.x$osm_points)
    ) |>
  dplyr::bind_rows(
    landuse_military |> 
      purrr::map_df(~.x$osm_lines) #nb, multilines was null
  ) 
  

military_collection <- military |> 
  purrr::map_df(~.x$osm_polygons) |>
  dplyr::bind_rows(
    military |> 
      purrr::map_df(~.x$osm_multipolygons)
  ) |>
  dplyr::bind_rows(
    military |> 
      purrr::map_df(~.x$osm_points)
  ) |>
  dplyr::bind_rows(
    military |> 
      purrr::map_df(~.x$osm_lines) 
  ) |>
  dplyr::bind_rows(
    military |> 
      purrr::map_df(~.x$osm_multilines)
  )


```

# Upload to PostGIS

```{r, eval = FALSE}
db <- connect_postgres()
sf::st_write(landuse_military_collection , dsn = db, layer = "landuse_military_osm")
sf::st_write(military_collection , dsn = db, layer = "military_osm")
DBI::dbDisconnect(db)
```
