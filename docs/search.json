[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "calculating-lst-and-nvdi.html",
    "href": "calculating-lst-and-nvdi.html",
    "title": "Calculate LST and NVDI",
    "section": "",
    "text": "# https://downloads.hindawi.com/journals/js/2016/1480307.pdf\n# http://www.gisandbeers.com/GeoBazar/Libros/Teledeteccion/Manual-Landsat-9-Handbook.pdf\nlibrary(raster)\n\nLoading required package: sp\n\n# Load data\nd <- \"../../../OneDrive/Data/landstat/LC09_L2SP_202024_20220826_20220830_02_T1/\"\n\nred = raster(file.path(d, \"LC09_L2SP_202024_20220826_20220830_02_T1_SR_B4.TIF\"))\nnear.infrared = raster(file.path(d, \"LC09_L2SP_202024_20220826_20220830_02_T1_SR_B5.TIF\"))\nband_10 = raster(file.path(d, \"LC09_L2SP_202024_20220826_20220830_02_T1_ST_B10.TIF\"))\nmeta <- readLines(file.path(d, \"LC09_L2SP_202024_20220826_20220830_02_T1_MTL.txt\"))\n\nM_L <- meta[stringr::str_detect(meta, \"RADIANCE_MULT_BAND_10\")] |>\n  stringr::str_split(\" = \") |>\n  unlist() |>\n  dplyr::nth(2) |>\n  as.numeric()\n\nA_L <- meta[stringr::str_detect(meta, \"RADIANCE_ADD_BAND_10\")] |>\n  stringr::str_split(\" = \") |>\n  unlist() |>\n  dplyr::nth(2) |>\n  as.numeric()\n\ntoa <- M_L * band_10 + A_L\n\nK_1 <- meta[stringr::str_detect(meta, \"K1_CONSTANT_BAND_10\")] |>\n  stringr::str_split(\" = \") |>\n  unlist() |>\n  dplyr::nth(2) |>\n  as.numeric()\n\nK_2 <- meta[stringr::str_detect(meta, \"K2_CONSTANT_BAND_10\")] |>\n  stringr::str_split(\" = \") |>\n  unlist() |>\n  dplyr::nth(2) |>\n  as.numeric()\n\nBT <- (K_2 / (log(K_1/toa)+1))- 273.15 # kevin to celcius\n\nnvdi_s <- 0.2\nnvdi_v <- 0.5\nnvdi <- (near.infrared - red)/(near.infrared + red)\n\np_v <- nvdi\np_v@data@values <- ((p_v@data@values - nvdi_s)/(nvdi_v-nvdi_s))^2\n\n\n# If nvdi less than 0 then water and emissivity (e_w) is 0.991\n# If nvdi < nvdi_s then emissivity (e_s) is 0.0996\n# If nvdi > nvdi_v then emissivity (e_v) is 0.973\n# if nvdi is between 0.2 and 0.5 then  e_v*P_V + e_s(1-P_V)+C_l\n\ne_w <- 0.991\ne_s <- 0.996\ne_v <- 0.973\nC_l <- 0.005 # correction\n\ne <- p_v\ne@data@values <- ifelse(\n  e@data@values <= 0, e_w, ifelse(\n    e@data@values >0 & e@data@values <= nvdi_s, e_s, ifelse(\n      e@data@values > nvdi_s & e@data@values <= nvdi_v, e_v * e@data@values + e_s * (1-e@data@values) + C_l, e_v\n      )\n  )\n)\n\nlambda <- 10.895 # average limiting wavelength\nrho <- 1.438 * 10e-2 # see paper\n\nLST <- (BT / (1 + (0.0010895 * BT / 1.4388) * log(e)))\nplot(LST)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "seven",
    "section": "",
    "text": "To learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "lst-by-building.html",
    "href": "lst-by-building.html",
    "title": "What is Land Surface Temperature Building for a given site?",
    "section": "",
    "text": "library(sf)\n\nLinking to GEOS 3.9.1, GDAL 3.4.3, PROJ 7.2.1; sf_use_s2() is TRUE\n\nlibrary(leaflet)\nlibrary(raster)\n\nLoading required package: sp\n\nlibrary(ggplot2)\nsource(\"R/postgis.R\")"
  },
  {
    "objectID": "lst-by-building.html#aggregate-raster-over-polygon",
    "href": "lst-by-building.html#aggregate-raster-over-polygon",
    "title": "What is Land Surface Temperature Building for a given site?",
    "section": "Aggregate Raster over Polygon",
    "text": "Aggregate Raster over Polygon\n\n# https://deepnote.com/@sookyan-siew/R-Aggregate-raster-to-polygon-data-10a3150c-e88d-4776-bae1-4b6dcb9e3916 \n# https://stackoverflow.com/questions/67717866/r-aggregating-raster-to-shapefile-polygons\n# Same projection\nlst3 <- projectRaster(lst2, crs = crs(buildings))\nplot(st_geometry(buildings))\nplot(lst3, add = TRUE)\nplot(st_geometry(buildings), add = TRUE)\n\n\n\navg_lst <- raster::extract(lst3, buildings, mean, na.rm = TRUE)\n\nbuildings$lst <- as.numeric(avg_lst)\n\n\npal <- colorNumeric(c(\"#0C2C84\", \"#41B6C4\", \"#FFFFCC\"), buildings$lst,\n  na.color = \"transparent\")\n\nleaflet(options = leafletOptions(minZoom = 14, maxZoom = 17)) |>\n   addTiles(group = \"OSM (default)\") |>\n  addProviderTiles(providers$Stamen.Toner, group = \"Toner\") |>\n  addProviderTiles(providers$Stamen.TonerLite, group = \"Toner Lite\") |>\n  fitBounds(lng1, lat1, lng2, lat2) |>\n  setMaxBounds(lng1, lat1, lng2, lat2) |>\n  addPolygons(data = buildings, fillColor =  ~pal(lst), \n              color = \"black\", weight = 0, fillOpacity = 0.8,\n              label = ~round(lst,1),\n              popup = ~paste(\"<b>ID:</b>\", FEATCODE, \"<br>\", \"<b>LST:</b>\", round(lst,1))) |>\n   addLegend(pal = pal, values = buildings$lst,\n    title = \"Surface temp\")   |>\n  addLayersControl(\n    baseGroups = c(\"OSM (default)\", \"Toner\", \"Toner Lite\"),\n    options = layersControlOptions(collapsed = FALSE)\n  )"
  },
  {
    "objectID": "mask-clouds.html",
    "href": "mask-clouds.html",
    "title": "Remove Clouds",
    "section": "",
    "text": "mask_values <- qa_lu |>\n  dplyr::filter(Cloud == \"Yes\") |>\n  dplyr::pull(`Pixel Value`)\n\nqa[qa %in% mask_values] <- NA\nmr <- mask(red, qa)\n\n\nplot(red)\n\n\n\nplot(mr)"
  },
  {
    "objectID": "overlapping-sites.html",
    "href": "overlapping-sites.html",
    "title": "Cluster Overlaping Sites",
    "section": "",
    "text": "Connect to Database and Extract Military Sites\n\ndb <- connect_postgres()\nDBI::dbListTables(db)\n\n[1] \"geography_columns\"     \"geometry_columns\"      \"spatial_ref_sys\"      \n[4] \"mil_bound_clust_osm\"   \"mil_boundaries_osm\"    \"mil_build_os\"         \n[7] \"mil_build_features\"    \"sites_202024_20220826\"\n\nsites <- st_read(db, \"mil_boundaries_osm\") |>\n  dplyr::select(osm_id, name, aeroway, description, landuse, military)\n\nDBI::dbDisconnect(db)\n\nsites <- sites |> dplyr::filter(name != \"WW2 Pillbox\")\n\n\n\nConvert to British National Grid and Buffer by 400m\nBuffer works better with BNG projection (Meters).\n\nsites_bng <- st_transform(sites, 27700) \nsites_buffer <- st_buffer(sites_bng, 400)\n\n\ng <- st_intersects(sites_buffer) |>\n  graph_from_adj_list()\ncomp <- components(g)\nsites$cluster <- comp$membership\n\nsites_clustered <- sites |> \n  dplyr::group_by(cluster) |>\n  dplyr::summarise(geometry = st_union(geometry)) \n\n\n# Add label to site based on largest area\nsites$area <- st_area(sites)\nsite_meta <- sites |>\n  dplyr::group_by(cluster) |>\n  dplyr::filter(area == max(area)) |>\n  as.data.frame() |>\n  dplyr::select(name, landuse, military, cluster) |>\n  dplyr::distinct()\n\npurrr::imap_dfr(\n  site_meta, ~data.frame(\n    label = .y, \n    sum_na = sum(is.na(.x)), \n    per_missing = round(100*sum(is.na(.x))/length(.x))\n  )\n)\n\n     label sum_na per_missing\n1     name      0           0\n2  landuse    181          23\n3 military    342          44\n4  cluster      0           0\n\nsites_clustered <- sites_clustered |>\n  dplyr::arrange(cluster) |>\n  dplyr::left_join(site_meta, by = \"cluster\") |>\n  dplyr::mutate(csize = comp$csize) |>\n  dplyr::select(cluster, csize, primary_name = name, primary_landuse = landuse, primary_military = military, geometry)\n\nsites_clustered <- st_make_valid(sites_clustered)\nsites_clustered$area <- st_area(sites_clustered)\n\n\nleaflet(sites_clustered) |>\n  addTiles() |>\n  setView(0,52, 8) |>\n  addPolygons(\n    label = ~primary_name, weight = 0, fillColor = \"red\",  \n    popup = ~paste(\n      cluster, csize, primary_name, \n      primary_landuse, primary_military, \n      round(area),\n      sep = \"<br>\"\n    )\n  )\n\n\n\n\n\n\n\ndb <- connect_postgres()\nst_write(sites_clustered, db, \"mil_bound_clust_osm\")\n\nNote: method with signature 'DBIObject#sf' chosen for function 'dbDataType',\n target signature 'PqConnection#sf'.\n \"PqConnection#ANY\" would also be valid\n\nDBI::dbDisconnect(db)"
  },
  {
    "objectID": "postgis-bbox-query.html",
    "href": "postgis-bbox-query.html",
    "title": "PostgreSQL GIS Query by Bounding Box",
    "section": "",
    "text": "Geospatial Extent\n\n\n\n\n\nGeospatial Extent\n\n\n\n\n\n\nWhich military sites are in the geospatial extent?\n\n# create bounding box\nbbox <- st_bbox(p202r24)\n\n# query database\ndb <- connect_postgres()\n\n# build query\nq <- query_bounding_box(bbox[1], bbox[2], bbox[3], bbox[4], tbl = \"mil_boundaries_osm\")\nq2 <- query_bounding_box(bbox[1], bbox[2], bbox[3], bbox[4])\nboundaries <- st_read(db, query = q)\nbuildings <- st_read(db, query = q2)\nDBI::dbDisconnect(db)\n\n# clip to extent\nboundaries <- boundaries[p202r24,]\nbuildings <- buildings[p202r24,]\n\n\nggplot() +\n  geom_sf(data = p202r24, fill = NA, colour = \"black\", inherit.aes = FALSE) + \n  geom_sf(data = boundaries, fill = \"red\", colour = NA, alpha = 0.2, inherit.aes = FALSE)\n\n\n\n\nBoundaries\n\n\n\nhead(boundaries)\n\nSimple feature collection with 6 features and 245 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -2.171208 ymin: 51.20075 xmax: -2.050753 ymax: 51.23485\nGeodetic CRS:  WGS 84\n      osm_id                           name abandoned.landuse access aeroway\n27  97303669           Battlesbury Barracks              <NA>   <NA>    <NA>\n28  97303671 Warminster Land Warfare Centre              <NA>   <NA>    <NA>\n29 198746407                       St Giles              <NA>   <NA>    <NA>\n30 252278280                           <NA>              <NA>   <NA>    <NA>\n31 252278483                           <NA>              <NA>   <NA>    <NA>\n32 252278484                           <NA>              <NA>   <NA>    <NA>\n   area building bunker_type description disused.aeroway historic icao  landuse\n27 <NA>     <NA>        <NA>        <NA>            <NA>     <NA> <NA> military\n28 <NA>     <NA>        <NA>        <NA>            <NA>     <NA> <NA> military\n29 <NA>     <NA>        <NA>        <NA>            <NA>     <NA> <NA>     <NA>\n30 <NA>     <NA>        <NA>        <NA>            <NA>     <NA> <NA> military\n31 <NA>     <NA>        <NA>        <NA>            <NA>     <NA> <NA> military\n32 <NA>     <NA>        <NA>        <NA>            <NA>     <NA> <NA> military\n   layer military historic.civilization military_service             operator\n27  <NA> barracks                  <NA>             <NA>                 <NA>\n28  <NA> barracks                  <NA>             <NA>                 <NA>\n29  <NA>     <NA>                  <NA>             <NA> Diocese of Salisbury\n30  <NA> barracks                  <NA>             <NA>                 <NA>\n31  <NA> barracks                  <NA>             <NA>                 <NA>\n32  <NA> barracks                  <NA>             <NA>                 <NA>\n   trench wheelchair  wikidata wikipedia building.colour building.levels fixme\n27   <NA>       <NA> Q19871094      <NA>            <NA>            <NA>  <NA>\n28   <NA>       <NA> Q19972061      <NA>            <NA>            <NA>  <NA>\n29   <NA>       <NA>      <NA>      <NA>            <NA>            <NA>  <NA>\n30   <NA>       <NA>      <NA>      <NA>            <NA>            <NA>  <NA>\n31   <NA>       <NA>      <NA>      <NA>            <NA>            <NA>  <NA>\n32   <NA>       <NA>      <NA>      <NA>            <NA>            <NA>  <NA>\n   image mineshaft_type roof.colour roof.shape alt_name disused old_name source\n27  <NA>           <NA>        <NA>       <NA>     <NA>    <NA>     <NA>   <NA>\n28  <NA>           <NA>        <NA>       <NA>     <NA>    <NA>     <NA>   <NA>\n29  <NA>           <NA>        <NA>       <NA>     <NA>    <NA>     <NA>   <NA>\n30  <NA>           <NA>        <NA>       <NA>     <NA>    <NA>     <NA>   <NA>\n31  <NA>           <NA>        <NA>       <NA>     <NA>    <NA>     <NA>   <NA>\n32  <NA>           <NA>        <NA>       <NA>     <NA>    <NA>     <NA>   <NA>\n   website barrier material note HE_ref abandoned addr.city addr.housename\n27    <NA>    <NA>     <NA> <NA>   <NA>      <NA>      <NA>           <NA>\n28    <NA>    <NA>     <NA> <NA>   <NA>      <NA>      <NA>           <NA>\n29    <NA>    <NA>     <NA> <NA>   <NA>      <NA>      <NA>           <NA>\n30    <NA>    <NA>     <NA> <NA>   <NA>      <NA>      <NA>           <NA>\n31    <NA>    <NA>     <NA> <NA>   <NA>      <NA>      <NA>           <NA>\n32    <NA>    <NA>     <NA> <NA>   <NA>      <NA>      <NA>           <NA>\n   addr.place addr.postcode    amenity building.material building.structure\n27       <NA>          <NA>       <NA>              <NA>               <NA>\n28       <NA>          <NA>       <NA>              <NA>               <NA>\n29       <NA>          <NA> grave_yard              <NA>               <NA>\n30       <NA>          <NA>       <NA>              <NA>               <NA>\n31       <NA>          <NA>       <NA>              <NA>               <NA>\n32       <NA>          <NA>       <NA>              <NA>               <NA>\n   depth derelict field_shelter foot healthcare height heritage\n27  <NA>     <NA>          <NA> <NA>       <NA>   <NA>     <NA>\n28  <NA>     <NA>          <NA> <NA>       <NA>   <NA>     <NA>\n29  <NA>     <NA>          <NA> <NA>       <NA>   <NA>     <NA>\n30  <NA>     <NA>          <NA> <NA>       <NA>   <NA>     <NA>\n31  <NA>     <NA>          <NA> <NA>       <NA>   <NA>     <NA>\n32  <NA>     <NA>          <NA> <NA>       <NA>   <NA>     <NA>\n   heritage.operator highway horse listed_status location natural  ref\n27              <NA>    <NA>  <NA>          <NA>     <NA>    <NA> <NA>\n28              <NA>    <NA>  <NA>          <NA>     <NA>    <NA> <NA>\n29              <NA>    <NA>  <NA>          <NA>     <NA>    <NA> <NA>\n30              <NA>    <NA>  <NA>          <NA>     <NA>    <NA> <NA>\n31              <NA>    <NA>  <NA>          <NA>     <NA>    <NA> <NA>\n32              <NA>    <NA>  <NA>          <NA>     <NA>    <NA> <NA>\n   roof.material roof.structure ruins shelter_type sport start_date surface\n27          <NA>           <NA>  <NA>         <NA>  <NA>       <NA>    <NA>\n28          <NA>           <NA>  <NA>         <NA>  <NA>       <NA>    <NA>\n29          <NA>           <NA>  <NA>         <NA>  <NA>       <NA>    <NA>\n30          <NA>           <NA>  <NA>         <NA>  <NA>       <NA>    <NA>\n31          <NA>           <NA>  <NA>         <NA>  <NA>       <NA>    <NA>\n32          <NA>           <NA>  <NA>         <NA>  <NA>       <NA>    <NA>\n   usage vehicle width airspace historic.period lower_limit upper_limit fenced\n27  <NA>    <NA>  <NA>     <NA>            <NA>        <NA>        <NA>   <NA>\n28  <NA>    <NA>  <NA>     <NA>            <NA>        <NA>        <NA>   <NA>\n29  <NA>    <NA>  <NA>     <NA>            <NA>        <NA>        <NA>   <NA>\n30  <NA>    <NA>  <NA>     <NA>            <NA>        <NA>        <NA>   <NA>\n31  <NA>    <NA>  <NA>     <NA>            <NA>        <NA>        <NA>   <NA>\n32  <NA>    <NA>  <NA>     <NA>            <NA>        <NA>        <NA>   <NA>\n   defensive_works wall waterway operator.type aerodrome.type boundary\n27            <NA> <NA>     <NA>          <NA>           <NA>     <NA>\n28            <NA> <NA>     <NA>          <NA>           <NA>     <NA>\n29            <NA> <NA>     <NA>          <NA>           <NA>     <NA>\n30            <NA> <NA>     <NA>          <NA>           <NA>     <NA>\n31            <NA> <NA>     <NA>          <NA>           <NA>     <NA>\n32            <NA> <NA>     <NA>          <NA>           <NA>     <NA>\n   designation  ele is_in addr.state addr.street covered noname owner\n27        <NA> <NA>  <NA>       <NA>        <NA>    <NA>   <NA>  <NA>\n28        <NA> <NA>  <NA>       <NA>        <NA>    <NA>   <NA>  <NA>\n29        <NA> <NA>  <NA>       <NA>        <NA>    <NA>   <NA>  <NA>\n30        <NA> <NA>  <NA>       <NA>        <NA>    <NA>   <NA>  <NA>\n31        <NA> <NA>  <NA>       <NA>        <NA>    <NA>   <NA>  <NA>\n32        <NA> <NA>  <NA>       <NA>        <NA>    <NA>   <NA>  <NA>\n   pillbox.type ref.Cassini ref.pen_number roof.surface iata  religion\n27         <NA>        <NA>           <NA>         <NA> <NA>      <NA>\n28         <NA>        <NA>           <NA>         <NA> <NA>      <NA>\n29         <NA>        <NA>           <NA>         <NA> <NA> christian\n30         <NA>        <NA>           <NA>         <NA> <NA>      <NA>\n31         <NA>        <NA>           <NA>         <NA> <NA>      <NA>\n32         <NA>        <NA>           <NA>         <NA> <NA>      <NA>\n   fence_type short_name addr.housenumber source.outline abandoned.building\n27       <NA>       <NA>             <NA>           <NA>               <NA>\n28       <NA>       <NA>             <NA>           <NA>               <NA>\n29       <NA>       <NA>             <NA>           <NA>               <NA>\n30       <NA>       <NA>             <NA>           <NA>               <NA>\n31       <NA>       <NA>             <NA>           <NA>               <NA>\n32       <NA>       <NA>             <NA>           <NA>               <NA>\n   gun_emplacement_type level place source.name  url construction_date\n27                 <NA>  <NA>  <NA>        <NA> <NA>              <NA>\n28                 <NA>  <NA>  <NA>        <NA> <NA>              <NA>\n29                 <NA>  <NA>  <NA>        <NA> <NA>              <NA>\n30                 <NA>  <NA>  <NA>        <NA> <NA>              <NA>\n31                 <NA>  <NA>  <NA>        <NA> <NA>              <NA>\n32                 <NA>  <NA>  <NA>        <NA> <NA>              <NA>\n   defensive tank_trap addr.district addr.village source.geometry ref.esher\n27      <NA>      <NA>          <NA>         <NA>            <NA>      <NA>\n28      <NA>      <NA>          <NA>         <NA>            <NA>      <NA>\n29      <NA>      <NA>          <NA>         <NA>            <NA>      <NA>\n30      <NA>      <NA>          <NA>         <NA>            <NA>      <NA>\n31      <NA>      <NA>          <NA>         <NA>            <NA>      <NA>\n32      <NA>      <NA>          <NA>         <NA>            <NA>      <NA>\n   ref.thekeep source.building wikimedia_commons wikimedia_commons.pano\n27        <NA>            <NA>              <NA>                   <NA>\n28        <NA>            <NA>              <NA>                   <NA>\n29        <NA>            <NA>              <NA>                   <NA>\n30        <NA>            <NA>              <NA>                   <NA>\n31        <NA>            <NA>              <NA>                   <NA>\n32        <NA>            <NA>              <NA>                   <NA>\n   wikimedia_commons_1 brand man_made structure description.de description.en\n27                <NA>  <NA>     <NA>      <NA>           <NA>           <NA>\n28                <NA>  <NA>     <NA>      <NA>           <NA>           <NA>\n29                <NA>  <NA>     <NA>      <NA>           <NA>           <NA>\n30                <NA>  <NA>     <NA>      <NA>           <NA>           <NA>\n31                <NA>  <NA>     <NA>      <NA>           <NA>           <NA>\n32                <NA>  <NA>     <NA>      <NA>           <NA>           <NA>\n   maxspeed maxspeed.type name.en ruins.building tourism name.cy\n27     <NA>          <NA>    <NA>           <NA>    <NA>    <NA>\n28     <NA>          <NA>    <NA>           <NA>    <NA>    <NA>\n29     <NA>          <NA>    <NA>           <NA>    <NA>    <NA>\n30     <NA>          <NA>    <NA>           <NA>    <NA>    <NA>\n31     <NA>          <NA>    <NA>           <NA>    <NA>    <NA>\n32     <NA>          <NA>    <NA>           <NA>    <NA>    <NA>\n   operational_status colour end_date fixme2 historic.military electrified\n27               <NA>   <NA>     <NA>   <NA>              <NA>        <NA>\n28               <NA>   <NA>     <NA>   <NA>              <NA>        <NA>\n29               <NA>   <NA>     <NA>   <NA>              <NA>        <NA>\n30               <NA>   <NA>     <NA>   <NA>              <NA>        <NA>\n31               <NA>   <NA>     <NA>   <NA>              <NA>        <NA>\n32               <NA>   <NA>     <NA>   <NA>              <NA>        <NA>\n   admin_level leisure postal_code shooting training_ground fhrs.id source.addr\n27        <NA>    <NA>        <NA>     <NA>            <NA>    <NA>        <NA>\n28        <NA>    <NA>        <NA>     <NA>            <NA>    <NA>        <NA>\n29        <NA>    <NA>        <NA>     <NA>            <NA>    <NA>        <NA>\n30        <NA>    <NA>        <NA>     <NA>            <NA>    <NA>        <NA>\n31        <NA>    <NA>        <NA>     <NA>            <NA>    <NA>        <NA>\n32        <NA>    <NA>        <NA>     <NA>            <NA>    <NA>        <NA>\n   addr.country addr.suburb created_by military_1 name.de name.fr name.ru\n27         <NA>        <NA>       <NA>       <NA>    <NA>    <NA>    <NA>\n28         <NA>        <NA>       <NA>       <NA>    <NA>    <NA>    <NA>\n29         <NA>        <NA>       <NA>       <NA>    <NA>    <NA>    <NA>\n30         <NA>        <NA>       <NA>       <NA>    <NA>    <NA>    <NA>\n31         <NA>        <NA>       <NA>       <NA>    <NA>    <NA>    <NA>\n32         <NA>        <NA>       <NA>       <NA>    <NA>    <NA>    <NA>\n   name.uk office pillbox_type source.shape addr.county ref.GB.uprn\n27    <NA>   <NA>         <NA>         <NA>        <NA>        <NA>\n28    <NA>   <NA>         <NA>         <NA>        <NA>        <NA>\n29    <NA>   <NA>         <NA>         <NA>        <NA>        <NA>\n30    <NA>   <NA>         <NA>         <NA>        <NA>        <NA>\n31    <NA>   <NA>         <NA>         <NA>        <NA>        <NA>\n32    <NA>   <NA>         <NA>         <NA>        <NA>        <NA>\n   seamark.restricted_area.restriction seamark.type shop contact.website\n27                                <NA>         <NA> <NA>            <NA>\n28                                <NA>         <NA> <NA>            <NA>\n29                                <NA>         <NA> <NA>            <NA>\n30                                <NA>         <NA> <NA>            <NA>\n31                                <NA>         <NA> <NA>            <NA>\n32                                <NA>         <NA> <NA>            <NA>\n   ref.cadw Military_Unit.1 Military_Unit.2 Military_Unit.3 lanes oneway\n27     <NA>            <NA>            <NA>            <NA>  <NA>   <NA>\n28     <NA>            <NA>            <NA>            <NA>  <NA>   <NA>\n29     <NA>            <NA>            <NA>            <NA>  <NA>   <NA>\n30     <NA>            <NA>            <NA>            <NA>  <NA>   <NA>\n31     <NA>            <NA>            <NA>            <NA>  <NA>   <NA>\n32     <NA>            <NA>            <NA>            <NA>  <NA>   <NA>\n   aerodrome source.icao closed heritage.website private length type\n27      <NA>        <NA>   <NA>             <NA>    <NA>   <NA> <NA>\n28      <NA>        <NA>   <NA>             <NA>    <NA>   <NA> <NA>\n29      <NA>        <NA>   <NA>             <NA>    <NA>   <NA> <NA>\n30      <NA>        <NA>   <NA>             <NA>    <NA>   <NA> <NA>\n31      <NA>        <NA>   <NA>             <NA>    <NA>   <NA> <NA>\n32      <NA>        <NA>   <NA>             <NA>    <NA>   <NA> <NA>\n   fhrs.authority fhrs.local_authority_id phone geograph.id\n27           <NA>                    <NA>  <NA>        <NA>\n28           <NA>                    <NA>  <NA>        <NA>\n29           <NA>                    <NA>  <NA>        <NA>\n30           <NA>                    <NA>  <NA>        <NA>\n31           <NA>                    <NA>  <NA>        <NA>\n32           <NA>                    <NA>  <NA>        <NA>\n   source.addr.postcode bunker.type closest_town  dog leaf_cycle leaf_type\n27                 <NA>        <NA>         <NA> <NA>       <NA>      <NA>\n28                 <NA>        <NA>         <NA> <NA>       <NA>      <NA>\n29                 <NA>        <NA>         <NA> <NA>       <NA>      <NA>\n30                 <NA>        <NA>         <NA> <NA>       <NA>      <NA>\n31                 <NA>        <NA>         <NA> <NA>       <NA>      <NA>\n32                 <NA>        <NA>         <NA> <NA>       <NA>      <NA>\n   bunker website.RAF height.median regiment training not.addr.postcode\n27   <NA>        <NA>          <NA>     <NA>     <NA>              <NA>\n28   <NA>        <NA>          <NA>     <NA>     <NA>              <NA>\n29   <NA>        <NA>          <NA>     <NA>     <NA>              <NA>\n30   <NA>        <NA>          <NA>     <NA>     <NA>              <NA>\n31   <NA>        <NA>          <NA>     <NA>     <NA>              <NA>\n32   <NA>        <NA>          <NA>     <NA>     <NA>              <NA>\n   operator.en disused.natural disused.water military. police tower addr.town\n27        <NA>            <NA>          <NA>      <NA>   <NA>  <NA>      <NA>\n28        <NA>            <NA>          <NA>      <NA>   <NA>  <NA>      <NA>\n29        <NA>            <NA>          <NA>      <NA>   <NA>  <NA>      <NA>\n30        <NA>            <NA>          <NA>      <NA>   <NA>  <NA>      <NA>\n31        <NA>            <NA>          <NA>      <NA>   <NA>  <NA>      <NA>\n32        <NA>            <NA>          <NA>      <NA>   <NA>  <NA>      <NA>\n   inscription tidal email source.postcode tower.type disused.military name.sco\n27        <NA>  <NA>  <NA>            <NA>       <NA>             <NA>     <NA>\n28        <NA>  <NA>  <NA>            <NA>       <NA>             <NA>     <NA>\n29        <NA>  <NA>  <NA>            <NA>       <NA>             <NA>     <NA>\n30        <NA>  <NA>  <NA>            <NA>       <NA>             <NA>     <NA>\n31        <NA>  <NA>  <NA>            <NA>       <NA>             <NA>     <NA>\n32        <NA>  <NA>  <NA>            <NA>       <NA>             <NA>     <NA>\n   source.military club disused.landuse abandoned.bunker_type\n27            <NA> <NA>            <NA>                  <NA>\n28            <NA> <NA>            <NA>                  <NA>\n29            <NA> <NA>            <NA>                  <NA>\n30            <NA> <NA>            <NA>                  <NA>\n31            <NA> <NA>            <NA>                  <NA>\n32            <NA> <NA>            <NA>                  <NA>\n   seamark.beacon_cardinal.category seamark.topmark.shape name.old ship.type\n27                             <NA>                  <NA>     <NA>      <NA>\n28                             <NA>                  <NA>     <NA>      <NA>\n29                             <NA>                  <NA>     <NA>      <NA>\n30                             <NA>                  <NA>     <NA>      <NA>\n31                             <NA>                  <NA>     <NA>      <NA>\n32                             <NA>                  <NA>     <NA>      <NA>\n   ref.nsa demolished.building amenity.1969.1992 name.1958.1964 name.1969.1992\n27    <NA>                <NA>              <NA>           <NA>           <NA>\n28    <NA>                <NA>              <NA>           <NA>           <NA>\n29    <NA>                <NA>              <NA>           <NA>           <NA>\n30    <NA>                <NA>              <NA>           <NA>           <NA>\n31    <NA>                <NA>              <NA>           <NA>           <NA>\n32    <NA>                <NA>              <NA>           <NA>           <NA>\n   name.1993.2010 source.1969.1992 source.1993.2010 wikimedia_commons.video\n27           <NA>             <NA>             <NA>                    <NA>\n28           <NA>             <NA>             <NA>                    <NA>\n29           <NA>             <NA>             <NA>                    <NA>\n30           <NA>             <NA>             <NA>                    <NA>\n31           <NA>             <NA>             <NA>                    <NA>\n32           <NA>             <NA>             <NA>                    <NA>\n   capacity industrial loc_name disused.fhrs.id historic.aeroway hazard\n27     <NA>       <NA>     <NA>            <NA>             <NA>   <NA>\n28     <NA>       <NA>     <NA>            <NA>             <NA>   <NA>\n29     <NA>       <NA>     <NA>            <NA>             <NA>   <NA>\n30     <NA>       <NA>     <NA>            <NA>             <NA>   <NA>\n31     <NA>       <NA>     <NA>            <NA>             <NA>   <NA>\n32     <NA>       <NA>     <NA>            <NA>             <NA>   <NA>\n   note.access FIXME source.operator bicycle motor_vehicle community_centre\n27        <NA>  <NA>            <NA>    <NA>          <NA>             <NA>\n28        <NA>  <NA>            <NA>    <NA>          <NA>             <NA>\n29        <NA>  <NA>            <NA>    <NA>          <NA>             <NA>\n30        <NA>  <NA>            <NA>    <NA>          <NA>             <NA>\n31        <NA>  <NA>            <NA>    <NA>          <NA>             <NA>\n32        <NA>  <NA>            <NA>    <NA>          <NA>             <NA>\n   name_1 name_2 name_3 occupier previous_name addr.locality landcover\n27   <NA>   <NA>   <NA>     <NA>          <NA>          <NA>      <NA>\n28   <NA>   <NA>   <NA>     <NA>          <NA>          <NA>      <NA>\n29   <NA>   <NA>   <NA>     <NA>          <NA>          <NA>      <NA>\n30   <NA>   <NA>   <NA>     <NA>          <NA>          <NA>      <NA>\n31   <NA>   <NA>   <NA>     <NA>          <NA>          <NA>      <NA>\n32   <NA>   <NA>   <NA>     <NA>          <NA>          <NA>      <NA>\n   military.branch name.historic source.area logainm.ref logainm.url name.ga\n27            <NA>          <NA>        <NA>        <NA>        <NA>    <NA>\n28            <NA>          <NA>        <NA>        <NA>        <NA>    <NA>\n29            <NA>          <NA>        <NA>        <NA>        <NA>    <NA>\n30            <NA>          <NA>        <NA>        <NA>        <NA>    <NA>\n31            <NA>          <NA>        <NA>        <NA>        <NA>    <NA>\n32            <NA>          <NA>        <NA>        <NA>        <NA>    <NA>\n   tenant opening_hours                       geometry\n27   <NA>          <NA> POLYGON ((-2.16199 51.20263...\n28   <NA>          <NA> POLYGON ((-2.161941 51.2109...\n29   <NA>          <NA> POLYGON ((-2.051569 51.2348...\n30   <NA>          <NA> POLYGON ((-2.159604 51.2063...\n31   <NA>          <NA> POLYGON ((-2.166669 51.2067...\n32   <NA>          <NA> POLYGON ((-2.158473 51.2051...\n\n\n\nggplot() +\n  geom_sf(data = p202r24, fill = NA, colour = \"black\", inherit.aes = FALSE) + \n  geom_sf(data = buildings, fill = \"red\", colour = \"red\", alpha = 0.2, inherit.aes = FALSE)\n\n\n\n\nBuildings\n\n\n\nhead(buildings)\n\nSimple feature collection with 6 features and 5 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -2.107443 ymin: 52.60725 xmax: -2.106043 ymax: 52.60865\nGeodetic CRS:  WGS 84\n                                    ID DISTNAME BUILDGTHEM CLASSIFICA FEATCODE\n1 B563AA38-2AC7-4171-8D9D-1C74CD5FBADA     <NA>       <NA>       <NA>    15014\n2 7F745932-FBD8-45F2-9DC8-6B5BBEA9CF3A     <NA>       <NA>       <NA>    15014\n3 C97B110A-86ED-413A-913A-8E2F88CD0DEA     <NA>       <NA>       <NA>    15014\n4 E5FD1E99-2DD0-4634-830C-225BABD484F7     <NA>       <NA>       <NA>    15014\n5 4FFC5598-C446-4BA3-BF45-FD39FD3F155F     <NA>       <NA>       <NA>    15014\n6 1CEF1863-D30B-4A26-BAB8-A1B8276F955A     <NA>       <NA>       <NA>    15014\n                        geometry\n1 POLYGON ((-2.10701 52.60848...\n2 POLYGON ((-2.106813 52.6084...\n3 POLYGON ((-2.10618 52.6085,...\n4 POLYGON ((-2.106225 52.6084...\n5 POLYGON ((-2.106179 52.6083...\n6 POLYGON ((-2.107314 52.6080..."
  },
  {
    "objectID": "selecting-data.html",
    "href": "selecting-data.html",
    "title": "Selecting Landsat Data",
    "section": "",
    "text": "library(rnaturalearth)\nlibrary(sf)\n\nLinking to GEOS 3.9.1, GDAL 3.4.3, PROJ 7.2.1; sf_use_s2() is TRUE\n\nlibrary(ggplot2)\n\nuk <- ne_countries(country= \"united kingdom\") |>\n  sf::st_as_sf()\n\nuk_grid <- st_make_grid(uk, what = \"centers\", n = 40) |>\n  st_as_sf()\n\nuk_grid$id <- 1:nrow(uk_grid)\n\nggplot() +\n  geom_sf(data = uk_grid) + \n  geom_sf(data = uk, fill = NA) \n\n\n\nuk_grid_clipped <- uk_grid[uk,]\n\nggplot() +\n  geom_sf(data = uk_grid_clipped)\n\n\n\nst_area(uk)/1e6\n\n248926.4 [m^2]\n\n# 243,610 km (google)\n\narea <- st_make_grid(uk,  n = 40) |>\n  st_as_sf() |>\n  st_area() / 1e6 |>\n  head()\n\nmean(area) |> as.numeric()\n\n[1] 361.6751\n\n\n\nmeta <- readr::read_csv(\"data/landsat_ot_c2_l2_631c33e385785a47/landsat_ot_c2_l2_631c33e385785a47.txt\")\n\nRows: 1883 Columns: 59\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (28): Landsat Product Identifier L2, Landsat Product Identifier L1, Lan...\ndbl  (26): Result Number, Collection Number, WRS Path, Target WRS Path, Roll...\ndttm  (2): Start Time, Stop Time\ndate  (3): Date Acquired, Date Product Generated L2, Date Product Generated L1\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nmeta |> dplyr::select(\n    PATH = `WRS Path`,\n    ROW = `WRS Row`,\n    `Date Acquired`,\n    `Land Cloud Cover`,\n    `Entity ID`\n  ) |>\n  dplyr::mutate(Month = paste0(substr(`Date Acquired`, 1, 8), \"01\")) |>\n  dplyr::mutate(ROW = as.numeric(ROW)) |> \n  dplyr::filter(PATH %in% c(201, 202), ROW == 24) |>\n  dplyr::filter(`Date Acquired` > \"2021-06-01\") |>\n  dplyr::group_by(Month) |>\n  dplyr::filter(`Land Cloud Cover` == min(`Land Cloud Cover`))\n\n# A tibble: 7 × 6\n# Groups:   Month [7]\n   PATH   ROW `Date Acquired` `Land Cloud Cover` `Entity ID`           Month    \n  <dbl> <dbl> <date>                       <dbl> <chr>                 <chr>    \n1   202    24 2022-01-14                    8.2  LC92020242022014LGN00 2022-01-…\n2   202    24 2022-03-19                    0.04 LC92020242022078LGN00 2022-03-…\n3   201    24 2022-04-21                    9.63 LC82010242022111LGN00 2022-04-…\n4   202    24 2022-05-14                   11.2  LC82020242022134LGN00 2022-05-…\n5   202    24 2022-06-15                    4.24 LC82020242022166LGN00 2022-06-…\n6   201    24 2022-07-18                    0.81 LC92010242022199LGN00 2022-07-…\n7   201    24 2022-08-11                    0.02 LC82010242022223LGN00 2022-08-…\n\n\n\nwrs2_d <- st_read(\"data/WRS2_descending_0/WRS2_descending.shp\")\n\nReading layer `WRS2_descending' from data source \n  `C:\\Users\\lukeh\\Documents\\quarto\\seven\\data\\WRS2_descending_0\\WRS2_descending.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 28892 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -180 ymin: -82.6401 xmax: 180 ymax: 82.6401\nGeodetic CRS:  WGS 84\n\nwrs2_d <- st_transform(wrs2_d, st_crs(uk_grid_clipped))\nwrs2_d_clipped <- wrs2_d[uk,]\n\nmeta <- readr::read_csv(\"data/landsat_ot_c2_l2_631c33e385785a47/landsat_ot_c2_l2_631c33e385785a47.txt\")\n\nRows: 1883 Columns: 59\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (28): Landsat Product Identifier L2, Landsat Product Identifier L1, Lan...\ndbl  (26): Result Number, Collection Number, WRS Path, Target WRS Path, Roll...\ndttm  (2): Start Time, Stop Time\ndate  (3): Date Acquired, Date Product Generated L2, Date Product Generated L1\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nmeta <- meta |>\n  dplyr::select(\n    PATH = `WRS Path`,\n    ROW = `WRS Row`,\n    `Date Acquired`,\n    `Land Cloud Cover`,\n    `Entity ID`\n  ) |>\n  dplyr::mutate(Month = paste0(substr(`Date Acquired`, 1, 8), \"01\")) |>\n  dplyr::group_by(\n    PATH, ROW, Month\n  ) |>\n  dplyr::filter(`Land Cloud Cover` == min(`Land Cloud Cover`)) |>\n  dplyr::mutate(ROW = as.numeric(ROW)) |>\n  dplyr::filter(`Date Acquired` >= \"2021-07-01\")\n\n\nd <- st_intersects(uk_grid_clipped, wrs2_d_clipped) |> \n  as.data.frame() \n  \npath_row <- wrs2_d_clipped[d$col.id,] |>\n  as.data.frame() |>\n  dplyr::select(PATH, ROW)\n\ndplyr::bind_cols(d, path_row) |>\n  dplyr::left_join(meta) |>\n  dplyr::group_by(row.id, Month) |>\n  dplyr::filter(`Land Cloud Cover` == min(`Land Cloud Cover`)) |>\n  dplyr::ungroup() |>\n  dplyr::select(PATH, ROW, `Date Acquired`, `Land Cloud Cover`, `Entity ID`, Month) |>\n  dplyr::distinct() |>\n  dplyr::filter(PATH %in% c(201, 202), ROW == 24) |>\n  dplyr::arrange(`Date Acquired`) |>\n  dplyr::group_by(Month) |>\n  dplyr::filter(`Land Cloud Cover` == min(`Land Cloud Cover`))\n\nJoining, by = c(\"PATH\", \"ROW\")\n\n\n# A tibble: 7 × 6\n# Groups:   Month [7]\n   PATH   ROW `Date Acquired` `Land Cloud Cover` `Entity ID`           Month    \n  <dbl> <dbl> <date>                       <dbl> <chr>                 <chr>    \n1   202    24 2022-01-14                    8.2  LC92020242022014LGN00 2022-01-…\n2   202    24 2022-03-19                    0.04 LC92020242022078LGN00 2022-03-…\n3   201    24 2022-04-21                    9.63 LC82010242022111LGN00 2022-04-…\n4   202    24 2022-05-14                   11.2  LC82020242022134LGN00 2022-05-…\n5   202    24 2022-06-15                    4.24 LC82020242022166LGN00 2022-06-…\n6   201    24 2022-07-18                    0.81 LC92010242022199LGN00 2022-07-…\n7   201    24 2022-08-11                    0.02 LC82010242022223LGN00 2022-08-…"
  },
  {
    "objectID": "site-lst-ratio.html",
    "href": "site-lst-ratio.html",
    "title": "Site LST Location Quotient",
    "section": "",
    "text": "db <- connect_postgres()\nDBI::dbListTables(db)\n\n[1] \"geography_columns\"     \"geometry_columns\"      \"spatial_ref_sys\"      \n[4] \"mil_boundaries_osm\"    \"mil_build_os\"          \"mil_build_features\"   \n[7] \"mil_bound_clust_osm\"   \"sites_202024_20220826\"\n\nsites <- st_read(db, \"mil_bound_clust_osm\")\nDBI::dbDisconnect(db)\n\n\nCalculate LST for Path and Row\n\nd <- \"../../../OneDrive/Data/landstat/LC09_L2SP_202024_20220826_20220830_02_T1/\"\nf <- list.files(d)\nb4_tif <- file.path(d, f[grepl(\"B4\", f)])\nb5_tif <- file.path(d, f[grepl(\"B5\", f)])\nb10_tif <- file.path(d, f[grepl(\"B10\", f)])\nmeta <- file.path(d, f[grepl(\"MTL.txt\", f)])\nLST <- calculate_lst(b4_tif, b5_tif, b10_tif, meta)\n\n\n\nRemove Cloud and Water\n\nqa <- raster(file.path(d, \"LC09_L2SP_202024_20220826_20220830_02_T1_QA_PIXEL.TIF\"))\nqa_lu <- readr::read_csv(\"data/qa_pixel.csv\")\n\nWarning: One or more parsing issues, see `problems()` for details\n\n\nRows: 21 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (13): Fill, Dilated Cloud, Cirrus, Cloud, Cloud Shadow, Snow, Clear, Wat...\ndbl  (1): Pixel Value\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nmask_values <- qa_lu |>\n  dplyr::filter(Cloud == \"Yes\" | Water == \"Yes\") |>\n  dplyr::pull(`Pixel Value`)\n\nqa[qa %in% mask_values] <- NA\nLSTm <- mask(LST, qa)\nLSTm[LSTm<0] <- NA\nplot(LSTm)\n\n\n\n\n\n\nCalculate LST by Site\n\nlstm2 <- projectRaster(LSTm, crs = crs(sites))\nsites_202024_20220826 <- st_crop(sites, lstm2)\n\nWarning: attribute variables are assumed to be spatially constant throughout all\ngeometries\n\n# This takes a while...\navg_lst <- raster::extract(lstm2, sites_202024_20220826, mean, na.rm = TRUE)\nsites_202024_20220826$lst <- as.numeric(avg_lst)\nmean_lst <- cellStats(lstm2, mean)\nsites_202024_20220826$lst_lq <- sites_202024_20220826$lst/mean_lst\nsummary(sites_202024_20220826)\n\n    cluster           csize         primary_name       primary_landuse   \n Min.   : 286.0   Min.   :  1.000   Length:844         Length:844        \n 1st Qu.: 698.8   1st Qu.:  1.000   Class :character   Class :character  \n Median : 941.5   Median :  1.000   Mode  :character   Mode  :character  \n Mean   :1085.0   Mean   :  1.962                                        \n 3rd Qu.:1281.5   3rd Qu.:  1.000                                        \n Max.   :2133.0   Max.   :124.000                                        \n                                                                         \n primary_military        area                    geometry        lst        \n Length:844         Min.   :        4   MULTIPOLYGON :  3   Min.   :0.0319  \n Class :character   1st Qu.:       29   POLYGON      :841   1st Qu.:0.9374  \n Mode  :character   Median :      720   epsg:4326    :  0   Median :1.6190  \n                    Mean   :   720672   +proj=long...:  0   Mean   :1.6789  \n                    3rd Qu.:    19774                       3rd Qu.:2.4025  \n                    Max.   :105853345                       Max.   :4.4420  \n                                                            NA's   :467     \n     lst_lq      \n Min.   :0.0188  \n 1st Qu.:0.5526  \n Median :0.9544  \n Mean   :0.9897  \n 3rd Qu.:1.4163  \n Max.   :2.6186  \n NA's   :467     \n\n\n\ndb <- connect_postgres()\nst_write(sites_202024_20220826, db,\"sites_202024_20220826\")\n\nNote: method with signature 'DBIObject#sf' chosen for function 'dbDataType',\n target signature 'PqConnection#sf'.\n \"PqConnection#ANY\" would also be valid\n\nDBI::dbDisconnect(db)\n\n\npal <- colorNumeric(c(\"#0C2C84\", \"#41B6C4\", \"#FFFFCC\"), sites_202024_20220826$lst_lq,\n  na.color = \"transparent\")\n\n\nleaflet(options = leafletOptions(minZoom = 8, maxZoom = 17)) |>\n  addTiles(group = \"OSM (default)\") |>\n  addProviderTiles(providers$Stamen.Toner, group = \"Toner\") |>\n  addProviderTiles(providers$Stamen.TonerLite, group = \"Toner Lite\") |>\n  setView(0,52, 8) |>\n  addPolygons(\n    data = sites_202024_20220826, fillColor =  ~pal(lst_lq), \n    color = \"black\", weight = 0, fillOpacity = 0.8,\n    label = ~primary_name, \n    popup = ~paste(\n      cluster, csize, primary_name, \n      primary_landuse, primary_military, \n      round(area),\n      round(lst),\n      round(lst_lq, 1),\n      sep = \"<br>\"\n    )\n  ) |>\n  addLegend(pal = pal, values = sites_202024_20220826$lst_lq,\n    title = \"Location Quotient (LST)\")   |>\n  addLayersControl(\n    baseGroups = c(\"OSM (default)\", \"Toner\", \"Toner Lite\"),\n    options = layersControlOptions(collapsed = FALSE)\n  )"
  },
  {
    "objectID": "os-api.html",
    "href": "os-api.html",
    "title": "Ordnance Survey API",
    "section": "",
    "text": "Objective\n\nDownload buildings from OS\nMatch to building height attribute.\n\n\n\nONS API\n\napi_key <- Sys.getenv(\"OS_PROJECT_API_KEY\")\n\nbase <- \"https://api.os.uk\"\npath <- \"/features/v1/wfs\"\nquery <- list(service=\"wfs\",\n              request=\"getcapabilities\",\n              key=api_key)\n\nreq <- httr::GET(base, path = path, query = query)\nreq$status_code\n\n[1] 200\n\nxml <- httr::content(req) \n\nNo encoding supplied: defaulting to UTF-8.\n\nxml2::xml_children(xml) \n\n{xml_nodeset (5)}\n[1] <ows:ServiceIdentification>\\n  <ows:Title>WFS</ows:Title>\\n  <ows:Abstrac ...\n[2] <ows:ServiceProvider>\\n  <ows:ProviderName>Ordnance Survey</ows:ProviderN ...\n[3] <ows:OperationsMetadata>\\n  <ows:Operation name=\"GetCapabilities\">\\n    < ...\n[4] <wfs:FeatureTypeList>\\n  <wfs:FeatureType>\\n    <wfs:Name>osfeatures:Site ...\n[5] <fes:Filter_Capabilities>\\n  <fes:Conformance>\\n    <fes:Constraint name= ...\n\n# Output formats\nxml |>\n  xml2::xml_child(3) |>\n  xml2::xml_child(4) |>\n  xml2::xml_child(3) |> \n  xml2::xml_children() |>\n  xml2::xml_children() |>\n  xml2::xml_text()  \n\n[1] \"GML32\"                            \"application/gml+xml; version=3.2\"\n[3] \"GML3\"                             \"text/xml; subtype=gml/3.1.1\"     \n[5] \"GML2\"                             \"text/xml; subtype=gml/2.1.2\"     \n[7] \"GEOJSON\"                         \n\n\n\n\nFeatures\n\nquery <- list(\n  service=\"wfs\",\n  request=\"DescribeFeatureType\",\n  version = \"2.0.0\",\n  key=api_key\n)\n\nreq <- httr::GET(base, path = path, query = query)\nreq$status_code\n\n[1] 200\n\n# Features\nhttr::content(req) |>\n  xml2::xml_find_all(\"//xsd:element[@substitutionGroup='gml:AbstractFeature']\") |>\n  xml2::xml_attr(\"name\")\n\nNo encoding supplied: defaulting to UTF-8.\n\n\n [1] \"Sites_AccessPoint\"             \"Sites_FunctionalSite\"         \n [3] \"Sites_RoutingPoint\"            \"Zoomstack_Airports\"           \n [5] \"Zoomstack_RailwayStations\"     \"Zoomstack_Names\"              \n [7] \"Zoomstack_Boundaries\"          \"Zoomstack_Contours\"           \n [9] \"Zoomstack_DistrictBuildings\"   \"Zoomstack_Waterlines\"         \n[11] \"Zoomstack_RoadsRegional\"       \"Zoomstack_RoadsNational\"      \n[13] \"Zoomstack_RoadsLocal\"          \"Zoomstack_Rail\"               \n[15] \"Zoomstack_ETL\"                 \"Zoomstack_Woodland\"           \n[17] \"Zoomstack_UrbanAreas\"          \"Zoomstack_Surfacewater\"       \n[19] \"Zoomstack_Sites\"               \"Zoomstack_NationalParks\"      \n[21] \"Zoomstack_LocalBuildings\"      \"Zoomstack_Greenspace\"         \n[23] \"Zoomstack_Foreshore\"           \"Topography_TopographicPoint\"  \n[25] \"Topography_TopographicLine\"    \"Topography_TopographicArea\"   \n[27] \"Topography_CartographicText\"   \"Topography_CartographicSymbol\"\n[29] \"Topography_BoundaryLine\"       \"Greenspace_GreenspaceArea\"    \n[31] \"WaterNetwork_HydroNode\"        \"WaterNetwork_WatercourseLink\" \n[33] \"Highways_FerryLink\"            \"Highways_FerryNode\"           \n[35] \"Highways_PathLink\"             \"Highways_PathNode\"            \n[37] \"Highways_ConnectingNode\"       \"Highways_ConnectingLink\"      \n[39] \"Highways_RoadLink\"             \"Highways_RoadNode\"            \n[41] \"Highways_Street\"               \"DetailedPathNetwork_RouteLink\"\n[43] \"DetailedPathNetwork_RouteNode\" \"OpenUPRN_Address\"             \n[45] \"OpenUSRN_USRN\"                 \"OpenTOID_TopographyLayer\"     \n[47] \"OpenTOID_HighwaysNetwork\"      \"OpenTOID_SitesLayer\"          \n\n# Feature Elements\nhttr::content(req) |>\n  xml2::xml_find_all(\"//xsd:complexType[@name = 'Zoomstack_LocalBuildingsFeatureType']//xsd:element\") \n\nNo encoding supplied: defaulting to UTF-8.\n\n\n{xml_nodeset (5)}\n[1] <xsd:element minOccurs=\"0\" maxOccurs=\"1\" name=\"OBJECTID\" type=\"xsd:int\"/>\n[2] <xsd:element minOccurs=\"0\" maxOccurs=\"1\" name=\"UUID\" nillable=\"true\">\\n   ...\n[3] <xsd:element minOccurs=\"0\" maxOccurs=\"1\" name=\"SHAPE\" nillable=\"true\" typ ...\n[4] <xsd:element minOccurs=\"0\" maxOccurs=\"1\" name=\"SHAPE_Length\" nillable=\"tr ...\n[5] <xsd:element minOccurs=\"0\" maxOccurs=\"1\" name=\"SHAPE_Area\" nillable=\"true ...\n\n\n\n\nGet Buildings\n\nquery <- list(\n  service=\"wfs\",\n  request=\"GetFeature\",\n  version = \"2.0.0\",\n  key=api_key,\n  typeNames = \"Zoomstack_LocalBuildings\",\n  outputFormat = \"GeoJSON\",\n  srsName = \"EPSG:27700\"\n)\n\nreq <- httr::GET(base, path = path, query = query)\nreq$status_code\n\n[1] 200\n\nsf <- read_sf(req)\n\nNo encoding supplied: defaulting to UTF-8.\n\nplot(sf$geometry)\n\nWarning in st_is_longlat(x): bounding box has potentially an invalid value range\nfor longlat data"
  },
  {
    "objectID": "os-building-height.html",
    "href": "os-building-height.html",
    "title": "OS Building Height",
    "section": "",
    "text": "Filter\n\n# Filter Buildings in a Bounding Box\nxml <- '\n<ogc:Filter>\n  <ogc:And>\n    <ogc:Within>\n      <PropertyName>SHAPE</PropertyName>\n      <gml:Box xmlns:gml=\"http://www.opengis.net/gml\" srsName=\"EPSG:27700\">\n        <gml:coordinates decimal=\".\" cs=\",\" ts=\",\">\n          436833.50,115334.90,437643.25,115761.50\n        </gml:coordinates>\n      </gml:Box>\n    </ogc:Within>\n    <ogc:PropertyIsEqualTo>\n      <ogc:PropertyName>DescriptiveGroup</ogc:PropertyName>\n      <ogc:Literal>Building</ogc:Literal>\n    </ogc:PropertyIsEqualTo>\n  </ogc:And>\n</ogc:Filter>\n'\n\n# Get Hits\nquery <- list(\n  service=\"wfs\",\n  request=\"GetFeature\",\n  version = \"2.0.0\",\n  key=api_key,\n  typeNames = layer,\n  resultType = \"hits\",\n  #bbox = \"436833.50,115334.90,437643.25,115761.50\", # Would take precedence over xml filter (see tech docs)\n  srsName = \"EPSG:27700\",\n  filter = xml\n)\n\nreq <- httr::GET(base, path = path, query = query) # This sometimes times out. Could be more strict with spatial filter.\nreq\n\nResponse [https://api.os.uk/features/v1/wfs?service=wfs&request=GetFeature&version=2.0.0&key=zS9xKmSOeOyGCGGCwFWGJfRbAAZd6eSb&typeNames=Topography_TopographicArea&resultType=hits&srsName=EPSG%3A27700&filter=%0A%3Cogc%3AFilter%3E%0A%20%20%3Cogc%3AAnd%3E%0A%20%20%20%20%3Cogc%3AWithin%3E%0A%20%20%20%20%20%20%3CPropertyName%3ESHAPE%3C%2FPropertyName%3E%0A%20%20%20%20%20%20%3Cgml%3ABox%20xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%20srsName%3D%22EPSG%3A27700%22%3E%0A%20%20%20%20%20%20%20%20%3Cgml%3Acoordinates%20decimal%3D%22.%22%20cs%3D%22%2C%22%20ts%3D%22%2C%22%3E%0A%20%20%20%20%20%20%20%20%20%20436833.50%2C115334.90%2C437643.25%2C115761.50%0A%20%20%20%20%20%20%20%20%3C%2Fgml%3Acoordinates%3E%0A%20%20%20%20%20%20%3C%2Fgml%3ABox%3E%0A%20%20%20%20%3C%2Fogc%3AWithin%3E%0A%20%20%20%20%3Cogc%3APropertyIsEqualTo%3E%0A%20%20%20%20%20%20%3Cogc%3APropertyName%3EDescriptiveGroup%3C%2Fogc%3APropertyName%3E%0A%20%20%20%20%20%20%3Cogc%3ALiteral%3EBuilding%3C%2Fogc%3ALiteral%3E%0A%20%20%20%20%3C%2Fogc%3APropertyIsEqualTo%3E%0A%20%20%3C%2Fogc%3AAnd%3E%0A%3C%2Fogc%3AFilter%3E%0A]\n  Date: 2022-09-15 07:37\n  Status: 200\n  Content-Type: application/xml\n  Size: 808 B\n<BINARY BODY>\n\nhit_attrs <- httr::content(req) |>\n  xml2::xml_attrs()\n\nNo encoding supplied: defaulting to UTF-8.\n\nnames(hit_attrs)\n\n [1] \"timeStamp\"        \"numberMatched\"    \"numberReturned\"   \"schemaLocation\"  \n [5] \"xmlns:xs\"         \"xmlns:wfs\"        \"xmlns:gml\"        \"xmlns:osfeatures\"\n [9] \"xmlns:xlink\"      \"xmlns:xsi\"       \n\nhit_attrs[2]\n\nnumberMatched \n        \"324\" \n\n# Get Results\nquery <- list(\n  service=\"wfs\",\n  request=\"GetFeature\",\n  version = \"2.0.0\",\n  key=api_key,\n  typeNames = layer,\n  outputFormat = \"GeoJSON\",\n#  bbox = \"436833.50,115334.90,437643.25,115761.50\",\n  srsName = \"EPSG:27700\",\n  startIndex = 1,\n  filter = xml\n)\n\nreq <- httr::GET(base, path = path, query = query)\nsf <- st_read(req, quiet = TRUE)\n\nNo encoding supplied: defaulting to UTF-8.\n\nhead(sf) ## TODO add building attribute filter to query\n\nSimple feature collection with 6 features and 29 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 436932.5 ymin: 115377.8 xmax: 437379.8 ymax: 115650.4\nGeodetic CRS:  WGS 84\n  OBJECTID                 TOID FeatureCode Version VersionDate     Theme\n1 61900966 osgb1000002682031679       10021       4   1/31/2018 Buildings\n2 61900980 osgb1000002682031699       10021       4   1/31/2018 Buildings\n3 61908773 osgb1000002682079795       10021       2   1/30/2018 Buildings\n4 61909217 osgb1000002682081995       10021      18   5/10/2022 Buildings\n5 61909220 osgb1000002682082039       10021       6   5/18/2016 Buildings\n6 61909245 osgb1000002682082371       10021       4   12/2/2010 Buildings\n  ThemeCount CalculatedAreaValue ChangeDate ReasonForChange ChangeHistoryCount\n1          1            48.65525  1/30/2018    Reclassified                  3\n2          1            48.80725  1/30/2018    Reclassified                  3\n3          1             7.18330  1/29/2018    Reclassified                  2\n4          1          6871.49861  5/10/2022        Modified                  7\n5          1           423.19892  5/18/2016        Modified                  5\n6          1           418.65525  8/19/2010             New                  1\n  DescriptiveGroup DescriptiveGroupCount         DescriptiveTerm\n1         Building                     1                    Tank\n2         Building                     1                    Tank\n3         Building                     1 Electricity Sub Station\n4         Building                     1                    null\n5         Building                     1                    null\n6         Building                     1                    null\n  DescriptiveTermCount    Make PhysicalLevel PhysicalPresence style_code\n1                    1 Manmade            50             null         34\n2                    1 Manmade            50             null         34\n3                    1 Manmade            50             null         34\n4                    0 Manmade            50             null         34\n5                    0 Manmade            50             null         34\n6                    0 Manmade            50             null         34\n  BHATopoAreaVersion BHAProcessDate AbsHMin AbsH2 AbsHMax RelH2 RelHMax BHAConf\n1                  4      2/14/2022     8.7  14.2    15.1   5.5     6.4      99\n2                  4      2/14/2022     8.6  14.3    15.0   5.7     6.4      99\n3                  2      2/14/2022    11.8  14.1    14.5   2.3     2.7      99\n4                 17      2/14/2022    13.2  20.5    33.6   7.3    20.4      99\n5                  6      2/14/2022    12.7  15.6    16.4   2.9     3.7      99\n6                  4      2/14/2022    13.9  17.3    18.1   3.4     4.2      99\n  Shape_Length Shape_Area                       geometry\n1     24.83081   48.65525 POLYGON ((436934.9 115384.7...\n2     24.82266   48.80725 POLYGON ((436934.7 115394.9...\n3     10.76007    7.18330 POLYGON ((437160.9 115427.3...\n4    729.30639 6871.49855 POLYGON ((437272.9 115593.3...\n5     93.40923  423.19892 POLYGON ((437379.7 115439.7...\n6     86.58001  418.65525 POLYGON ((437322.5 115650.4...\n\nplot(sf$geometry)\n\nWarning in st_is_longlat(x): bounding box has potentially an invalid value range\nfor longlat data"
  },
  {
    "objectID": "os-api-mil-sites.html",
    "href": "os-api-mil-sites.html",
    "title": "Get Mil Sites from OS API",
    "section": "",
    "text": "library(sf)\n\nLinking to GEOS 3.9.1, GDAL 3.4.3, PROJ 7.2.1; sf_use_s2() is TRUE\n\nlibrary(leaflet)\n\napi_key <- Sys.getenv(\"OS_PROJECT_API_KEY\")\nbase <- \"https://api.os.uk\"\npath <- \"/features/v1/wfs\""
  },
  {
    "objectID": "military-sites-from-osm.html",
    "href": "military-sites-from-osm.html",
    "title": "Military Sites from OSM",
    "section": "",
    "text": "library(rnaturalearth)\nlibrary(sf)\nlibrary(ggplot2)\nlibrary(osmdata)\nlibrary(leaflet)\nsource(\"R/postgis.R\")"
  },
  {
    "objectID": "military-sites-from-osm.html#united-kingdom",
    "href": "military-sites-from-osm.html#united-kingdom",
    "title": "Military Sites from OSM",
    "section": "United Kingdom",
    "text": "United Kingdom\n\nuk <- ne_countries(country = 'united kingdom') |>\n  st_as_sf()\n\n(p1 <- ggplot(uk) +\n  geom_sf(alpha = 0.5) + \n  theme_minimal())"
  },
  {
    "objectID": "military-sites-from-osm.html#bounding-box",
    "href": "military-sites-from-osm.html#bounding-box",
    "title": "Military Sites from OSM",
    "section": "Bounding Box",
    "text": "Bounding Box\n\n(bbox_uk <- st_bbox(uk))\n\n     xmin      ymin      xmax      ymax \n-7.572168 49.960000  1.681531 58.635000"
  },
  {
    "objectID": "military-sites-from-osm.html#generating-chunks",
    "href": "military-sites-from-osm.html#generating-chunks",
    "title": "Military Sites from OSM",
    "section": "Generating Chunks",
    "text": "Generating Chunks\nCreate a grid over the uk\n\ng <- st_make_grid(uk, what = \"polygons\", n = 10) |> st_as_sf()\ng_clipped <- g[uk,]\n\np1 + geom_sf(data = g_clipped, inherit.aes = FALSE, fill = NA, colour = \"black\")\n\n\n\n\nExtract the bounding boxes\n\nbbox_g <- purrr::map(g_clipped$x, ~st_bbox(.x) |> as.numeric()) |>\n  unlist() |> \n  matrix(ncol = 4, byrow = TRUE) |>\n  dplyr::as_tibble() |>\n  rlang::set_names(c(\"xmin\", \"ymin\", \"xmax\", \"ymax\"))\n\nWarning: The `x` argument of `as_tibble.matrix()` must have unique column names if `.name_repair` is omitted as of tibble 2.0.0.\nUsing compatibility `.name_repair`.\nThis warning is displayed once every 8 hours.\nCall `lifecycle::last_lifecycle_warnings()` to see where this warning was generated."
  },
  {
    "objectID": "military-sites-from-osm.html#extract-data",
    "href": "military-sites-from-osm.html#extract-data",
    "title": "Military Sites from OSM",
    "section": "Extract Data",
    "text": "Extract Data\nLoop through bounding box and extract open street map features with key = ‘landuse’ and value = ‘military’.\n\nLanduse Military\n\nlanduse_military <- purrr::map(1:nrow(bbox_g), ~{\n  tryCatch({\n    opq(bbox = as.numeric(bbox_g[.x,])) |>  \n      add_osm_feature(key = \"landuse\", value = \"military\") |>\n      osmdata_sf()\n    }, error = function(e) {\n    opq(bbox = as.numeric(bbox_g[.x,])) |>  \n        add_osm_feature(key = \"landuse\", value = \"military\") |>\n        osmdata_sf()\n  }, finally = NA)\n  })\n\nany(purrr::map_lgl(landuse_military, ~any(is.na(.x)))) # check\n\n\n\nMilitary\n\nmilitary <- purrr::map(1:nrow(bbox_g), ~{\n  tryCatch({\n    opq(bbox = as.numeric(bbox_g[.x,])) |>  \n      add_osm_feature(key = \"military\") |>\n      osmdata_sf()\n    }, error = function(e) {\n    opq(bbox = as.numeric(bbox_g[.x,])) |>  \n        add_osm_feature(key = \"military\") |>\n        osmdata_sf()\n  }, finally = NA)\n  })\n\nany(purrr::map_lgl(military, ~any(is.na(.x)))) # check\n\n\n\nProcess Data\n\nlanduse_military_collection <- landuse_military |> \n  purrr::map_df(~.x$osm_polygons) |>\n  dplyr::bind_rows(landuse_military |> \n                     purrr::map_df(~.x$osm_multipolygons)) |>\n  dplyr::bind_rows(\n    landuse_military |> \n      purrr::map_df(~.x$osm_points)\n    ) |>\n  dplyr::bind_rows(\n    landuse_military |> \n      purrr::map_df(~.x$osm_lines) #nb, multilines was null\n  ) \n  \n\nmilitary_collection <- military |> \n  purrr::map_df(~.x$osm_polygons) |>\n  dplyr::bind_rows(\n    military |> \n      purrr::map_df(~.x$osm_multipolygons)\n  ) |>\n  dplyr::bind_rows(\n    military |> \n      purrr::map_df(~.x$osm_points)\n  ) |>\n  dplyr::bind_rows(\n    military |> \n      purrr::map_df(~.x$osm_lines) \n  ) |>\n  dplyr::bind_rows(\n    military |> \n      purrr::map_df(~.x$osm_multilines)\n  )"
  },
  {
    "objectID": "geocode-mil-sites-from-wiki.html",
    "href": "geocode-mil-sites-from-wiki.html",
    "title": "Geocode Military Sites from Wikipedia",
    "section": "",
    "text": "Army installations and RAF stations are provided in a table on wikipedia. Royal Navy establishments are provided as a list. The approach taken is to scrape the tables and list.\n\nArmy\n\nurl <- \"https://en.wikipedia.org/wiki/List_of_British_Army_installations\"\nreq <- httr::GET(url)\nreq$status_code\narmy_installations <- httr::content(req) |>\n  xml2::xml_find_all('//*[@id=\"mw-content-text\"]/div[1]/table[21]//tr//td') |>\n  xml2::xml_text() |>\n  matrix(ncol = 6, byrow = TRUE) |>\n  dplyr::as_tibble() |>\n  rlang::set_names(c(\"name\", \"garrison\", \"country\", \"county\", \"opened\", \"notes\"))\narmy_installations\n\n\n\nRAF\n\nurl <- \"https://en.wikipedia.org/wiki/List_of_Royal_Air_Force_stations\"\nxpath <- '//*[@id=\"mw-content-text\"]/div[1]/table[1]//tr/td'\nlabs <- c(\"name\", \"country\", \"county\", \"units and purpose\")\nn <- length(labs)\n\nreq <- httr::GET(url)\nreq$status_code\n\nraf_stations <- httr::content(req) |>\n  xml2::xml_find_all(xpath) |>\n  xml2::xml_text() |>\n  matrix(ncol = n, byrow = TRUE) |>\n  dplyr::as_tibble() |>\n  rlang::set_names(labs) \n\n(raf_stations <- purrr::map(raf_stations, ~stringr::str_remove(.x, \"\\n\")) |>\n  dplyr::as_tibble())\n\nmob <- c(\n  \"RAF Coningsby\",\"RAF Marham\", \"RAF Lossiemouth\", \"RAF Waddington\", \n  \"RAF Brize Norton\", \"RAF Benson\", \"RAF Odiham\"\n  )\nraf_stations$mob <- raf_stations$name %in% mob\nraf_stations\n\n\n\nRoyal Navy\nRoyal navy sites are a list.\n\n# Naval Bases\nnaval_bases <- list(\n  c(\"HMS Drake\", \"HMNB Devonport, Devonport, Devon\"),\n  c(\"HMS Nelson\" ,\"HMNB Portsmouth, Portsmouth\"),\n  c(\"HMS Neptune\", \"HMNB Clyde, Faslane, Dunbartonshire\")\n)\n\n# Air Stations\nair_stations <- list(\n  c(\"HMS Seahawk\", \"RNAS Culdrose, Cornwall\"),\n  c(\"HMS Heron\", \"RNAS Yeovilton, Somerset\"),\n  c(\"HMS Gannet\", \"South Ayrshire\")\n  )\n\n# Training Establishments\ntraining_estab <- list(\n  c(\"HMS Collingwood\", \"Fareham, Hampshire\"),\n  c(\"HMS Dartmouth\", \"Britannia Royal Naval College, Dartmouth, Devon\"),\n  c(\"HMS Excellent\", \"Whale Island, Portsmouth\"),\n  c(\"HMS Raleigh\", \"Torpoint, Cornwall\"),\n  c(\"HMS Sultan\", \"Gosport, Hampshire\"),\n  c(\"HMS Temeraire\", \"Portsmouth\")\n)\n\n# Other\nother <- list(\n  c(\"HMS Caledonia\", \"Rosyth Dockyard, Rosyth, Fife\"),\n  c(\"HMS Saker\", \"United States\"),\n  c(\"Institute of Naval Medicine\", \"Alverstoke, Hampshire\"),\n  c(\"Northwood Headquarters\", \"Northwood, Middlesex, England\")\n)\n\n# Defence Munition Centres\ndmc <- list(\n  c(\"DM Beith\", \"Beith, Ayrshire\"),\n  c(\"RNAD Coulport\", \"Coulport,  Argyll and Bute\"),\n  c(\"DM Crombie\", \"Crombie, Firth of Forth\"),\n  c(\"DM Gosport\", \"Portsmouth Harbour, Hampshire\")\n  )\n\n# Testing\ntesteval <- list(c(\"HMS Vulcan\", \"Dounreay, Thurso, Caithness\"))\n\n# Royal Marines\nrm <- list(\n  c(\"Commando Training Centre Royal Marines\", \"Lympstone, Devon\"),\n  c(\"Stonehouse Barracks\", \"Plymouth, Devon\"),\n  c(\"RM Poole\", \"Hamworthy Barracks, Poole, Dorset\"),\n  c(\"RM Condor\", \"Arbroath, Angus\"),\n  c(\"RM Tamar\", \"HMNB Devonport\"),\n  c(\"Norton Manor Camp\", \"Taunton, Somerset\"),\n  c(\"Bickleigh Barracks\", \"Plymouth, Devon\"),\n  c(\"RM Chivenor\", \"Braunton, Devon\"),\n  c(\"RM Instow\", \"Instow, Devon\")\n  )\n\n\nnaval_establishments <- \n  list(naval_bases, air_stations, training_estab, other, dmc, testeval, rm)\n\ntype <- c(\"Naval Base\", \"Air Station\", \"Training Establishment\", \"Other\", \"Defence Munitions\", \"Testing\", \"Royal Marines\")\n\nnaval_establishments <- naval_establishments |>\n  purrr::map(~unlist(.x) |> matrix(ncol = 2, byrow = TRUE) |>\n               as.data.frame() |>\n               rlang::set_names(c(\"name\", \"location\")) |>\n               tibble::as_tibble())\n\nnames(naval_establishments) <- type\nnaval_df <- purrr::imap_dfr(naval_establishments, ~dplyr::tibble(type =  .y, .x))\n\n\n\nGeocode Locations\n\nnavy <- naval_df |>\n  dplyr::mutate(service = \"RN/RM\") |>\n  dplyr::mutate(location = paste(name, location, sep = \", \")) |>\n  dplyr::select(service, type, name, location)\n\narmy <- army_installations |> \n  dplyr::mutate(service = \"Army\") |>\n  dplyr::mutate(type = NA) |>\n  dplyr::mutate(location = ifelse(\n    garrison == \"\", \n    paste(name, county, country, sep = \", \"),\n    paste(name, garrison, county, country, sep = \", \")\n  )) |>\n  dplyr::select(service, type, name, location)\n\nraf <- raf_stations |>\n  dplyr::mutate(service = \"RAF\") |>\n  dplyr::mutate(type = ifelse(mob, \"Main Operating Base\", \"Other\")) |>\n  dplyr::mutate(location = paste(name, county, country, sep = \", \")) |>\n  dplyr::select(service, type, name, location)\n\nsites <- dplyr::bind_rows(navy, army, raf)\n\nsites_geo <- sites |>\n ggmap::mutate_geocode(location, output = \"latlona\")\n\nsites_geo\n\n# vulcan\n# aliwal\n# brompton\n# buckley\n# gale\n# goojerat\n# jellabad \n# lucknow\n# normandy\n# unijack\n# wing\n# benbecula\n# little rissington\n# raf wittering\n\n\n\nUpload to PostGIS\n\ndb <- connect_postgres()\nDBI::dbWriteTable(db, \"mil_sites_geo\", sites_geo, row.names = FALSE, overwrite = TRUE)\nDBI::dbDisconnect(db)\n\n\n\nCheck Data\n\ndb <- connect_postgres()\n(mil_sites_geo <- db |>\n  dplyr::tbl(\"mil_sites_geo\") |>\n  dplyr::collect())\n\n# A tibble: 188 × 7\n   service type                   name            location     lon   lat address\n   <chr>   <chr>                  <chr>           <chr>      <dbl> <dbl> <chr>  \n 1 RN/RM   Naval Base             HMS Drake       HMS Drake… -4.19  50.4 hmnb d…\n 2 RN/RM   Naval Base             HMS Nelson      HMS Nelso… -1.10  50.8 6 quee…\n 3 RN/RM   Naval Base             HMS Neptune     HMS Neptu… -4.81  56.1 faslan…\n 4 RN/RM   Air Station            HMS Seahawk     HMS Seaha… -5.05  50.3 cornwa…\n 5 RN/RM   Air Station            HMS Heron       HMS Heron… -2.65  51.0 rnas, …\n 6 RN/RM   Air Station            HMS Gannet      HMS Ganne… -4.58  55.5 hms ga…\n 7 RN/RM   Training Establishment HMS Collingwood HMS Colli… -1.19  50.8 newgat…\n 8 RN/RM   Training Establishment HMS Dartmouth   HMS Dartm… -3.58  50.4 britan…\n 9 RN/RM   Training Establishment HMS Excellent   HMS Excel… -1.10  50.8 wardro…\n10 RN/RM   Training Establishment HMS Raleigh     HMS Ralei… -4.22  50.4 trevol…\n# … with 178 more rows\n\nDBI::dbDisconnect(db)"
  },
  {
    "objectID": "os-api-mil-sites.html#functional-sites",
    "href": "os-api-mil-sites.html#functional-sites",
    "title": "Get Mil Sites from OS API",
    "section": "Functional Sites",
    "text": "Functional Sites\n\nymax <- 54.4004\nxmin <- -1.8299\nymin <- 54.2789\nxmax <- -1.4989\n\nbbox_crds <- c(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax)\nbbox <- st_bbox(bbox_crds, crs = 4326)\nbbox <- bbox |> st_as_sfc()\nbbox <- st_transform(bbox, 27700)\n\nbbox_bng <- paste(as.character(attributes(bbox)$bbox), collapse = \",\")\nlayer <- \"Sites_FunctionalSite\"\n\n# Query the hits\nquery <- list(\n  service=\"wfs\",\n  request=\"GetFeature\",\n  version = \"2.0.0\",\n  key=api_key,\n  typeNames = layer,\n  srsName = \"EPSG:27700\",\n  resultType = \"hits\",\n  bbox = bbox_bng #!xml filter \n  )\n\nhits <- httr::GET(base, path = path, query = query) |>\n  httr::content()\n\nNo encoding supplied: defaulting to UTF-8.\n\n(hits_r <- hits |>  xml2::xml_attrs() |> dplyr::nth(2) |> as.numeric())\n\n[1] 43\n\nN <- ceiling(hits_r/100)\n\n# Query the results\nquery$resultType <- \"results\"\nquery$outputFormat = \"GeoJSON\"\n\nresults <- httr::GET(base, path = path, query = query) |>\n  sf::st_read(quiet = TRUE)\n\nNo encoding supplied: defaulting to UTF-8.\n\nresults |>\n  dplyr::as_tibble() |>\n  dplyr::group_by(SiteFunction) |>\n  dplyr::count(sort = TRUE)\n\n# A tibble: 12 × 2\n# Groups:   SiteFunction [12]\n   SiteFunction                              n\n   <chr>                                 <int>\n 1 Primary Education                        22\n 2 Railway Station                           5\n 3 Medical Care Accommodation                3\n 4 Electricity Distribution                  2\n 5 Gas Distribution or Storage               2\n 6 Road User Services                        2\n 7 Secondary Education                       2\n 8 Airfield                                  1\n 9 Electricity Production                    1\n10 Further Education,Secondary Education     1\n11 Non State Primary Education               1\n12 Special Needs Education                   1\n\nresults |> dplyr::pull(DistinctiveName1)\n\n [1] \"RAF Leeming\"                                                     \n [2] \"Ainderby Steeple Church of England Primary School\"               \n [3] \"Bedale High School\"                                              \n [4] \"Bedale Church of England Primary School\"                         \n [5] \"Brompton-on-Swale Church of England Primary School\"              \n [6] \"Michael Syddall Church of England Voluntary Aided Primary School\"\n [7] \"Bolton-on-Swale St Mary's Church of England Primary School\"      \n [8] \"Hackforth and Hornby Church of England Primary School\"           \n [9] \"Mowbray School\"                                                  \n[10] \"Crakehall Church of England Primary School\"                      \n[11] \"Le Cateau Community Primary School\"                              \n[12] \"Aysgarth School\"                                                 \n[13] \"Hunton and Arrathorne Community Primary School\"                  \n[14] \"Wavell Community Infant and Nursery School\"                      \n[15] \"Carnagill Community Primary School\"                              \n[16] \"Risedale Sports and Community College\"                           \n[17] \"Hipswell Church of England Primary School\"                       \n[18] \"Colburn Community Primary School\"                                \n[19] \"Spennithorne Church of England Primary School\"                   \n[20] \"The Wensleydale School\"                                          \n[21] \"Leyburn Community Primary School\"                                \n[22] \"Middleham Church of England (Aided) School\"                      \n[23] \"Kirkby Fleetham Church of England Primary School\"                \n[24] \"Leeming and Londonderry Community Primary School\"                \n[25] \"null\"                                                            \n[26] \"Leeming RAF Community Primary School\"                            \n[27] \"Cambrai Primary School\"                                          \n[28] \"Maple Lodge\"                                                     \n[29] \"Rosedale Retirement Nursing Home\"                                \n[30] \"Bedale\"                                                          \n[31] \"Finghall Lane\"                                                   \n[32] \"Leyburn\"                                                         \n[33] \"Leeming Bar Services\"                                            \n[34] \"Coneygarth Services\"                                             \n[35] \"Leeming Garth Manor\"                                             \n[36] \"Aiskew Leeming Bar Church of England Primary School\"             \n[37] \"null\"                                                            \n[38] \"null\"                                                            \n[39] \"null\"                                                            \n[40] \"Scruton\"                                                         \n[41] \"Leeming Bar\"                                                     \n[42] \"null\"                                                            \n[43] \"Wavell Community Junior School\""
  },
  {
    "objectID": "os-api-mil-sites.html#topographic-line",
    "href": "os-api-mil-sites.html#topographic-line",
    "title": "Get Mil Sites from OS API",
    "section": "Topographic Line",
    "text": "Topographic Line\n\nlayer <- \"Topography_TopographicLine\"\n\n#Query the hits\nquery <- list(\n  service=\"wfs\",\n  request=\"GetFeature\",\n  version = \"2.0.0\",\n  key=api_key,\n  typeNames = layer,\n  srsName = \"EPSG:27700\",\n  resultType = \"hits\",\n  bbox = bbox_bng #!xml filter \n  )\n\nhits <- httr::GET(base, path = path, query = query) |>\n  httr::content()\n\nNo encoding supplied: defaulting to UTF-8.\n\n(hits_r <- hits |>  xml2::xml_attrs() |> dplyr::nth(2) |> as.numeric())\n\n[1] 330781\n\nN <- ceiling(hits_r/100)\n\nquery$resultType <- \"results\"\nquery$outputFormat <- NULL\n\nreq <- httr::GET(base, path = path, query = query) \n\nresults <- httr::content(req) |>\n  xml2::xml_children() |>\n  xml2::as_list() |>\n  purrr::map_df(~unlist(.x$Topography_TopographicLine))\n\nNo encoding supplied: defaulting to UTF-8.\n\nresults |>\n  dplyr::as_tibble() |>\n  dplyr::group_by(Theme) |>\n  dplyr::count(sort = TRUE)\n\n# A tibble: 4 × 2\n# Groups:   Theme [4]\n  Theme                            n\n  <chr>                        <int>\n1 Land                            68\n2 Land,Roads Tracks And Paths     25\n3 Land,Water                       6\n4 Roads Tracks And Paths,Water     1\n\nresults |>\n  dplyr::as_tibble() |>\n  dplyr::group_by(DescriptiveGroup) |>\n  dplyr::count(sort = TRUE)\n\n# A tibble: 5 × 2\n# Groups:   DescriptiveGroup [5]\n  DescriptiveGroup     n\n  <chr>            <int>\n1 General Feature     64\n2 General Surface     19\n3 Path                 9\n4 Inland Water         7\n5 Landform             1\n\nresults |>\n  dplyr::as_tibble() |>\n  dplyr::group_by(DescriptiveTerm) |>\n  dplyr::count(sort = TRUE)\n\n# A tibble: 6 × 2\n# Groups:   DescriptiveTerm [6]\n  DescriptiveTerm           n\n  <chr>                 <int>\n1 <NA>                     67\n2 Step                     16\n3 Unmade Path Alignment     9\n4 Watercourse               6\n5 Ford                      1\n6 Top Of Cliff              1"
  },
  {
    "objectID": "os-api-mil-sites.html#zoomstack-sites",
    "href": "os-api-mil-sites.html#zoomstack-sites",
    "title": "Get Mil Sites from OS API",
    "section": "Zoomstack Sites",
    "text": "Zoomstack Sites\n\nlayer <- \"Zoomstack_Sites\"\n\n#Query the hits\nquery <- list(\n  service=\"wfs\",\n  request=\"GetFeature\",\n  version = \"2.0.0\",\n  key=api_key,\n  typeNames = layer,\n  srsName = \"EPSG:27700\",\n  resultType = \"hits\",\n  bbox = bbox_bng #!xml filter \n  )\n\nhits <- httr::GET(base, path = path, query = query) |>\n  httr::content()\n\nNo encoding supplied: defaulting to UTF-8.\n\n(hits_r <- hits |>  xml2::xml_attrs() |> dplyr::nth(2) |> as.numeric())\n\n[1] 33\n\nN <- ceiling(hits_r/100)\n\nquery$resultType <- \"results\"\nquery$outputFormat = \"GeoJSON\"\n\nresults <- httr::GET(base, path = path, query = query) |>\n  sf::st_read(quiet = TRUE)\n\nNo encoding supplied: defaulting to UTF-8.\n\nresults |>\n  dplyr::as_tibble() |>\n  dplyr::group_by(Type) |>\n  dplyr::count(sort = TRUE)\n\n# A tibble: 4 × 2\n# Groups:   Type [4]\n  Type               n\n  <chr>          <int>\n1 Education         27\n2 Medical Care       3\n3 Road Transport     2\n4 Air Transport      1"
  },
  {
    "objectID": "os-api-mil-sites.html#zoomstack-urban-areas",
    "href": "os-api-mil-sites.html#zoomstack-urban-areas",
    "title": "Get Mil Sites from OS API",
    "section": "Zoomstack Urban Areas",
    "text": "Zoomstack Urban Areas\n\nlayer <- \"Zoomstack_UrbanAreas\"\n\n#Query the hits\nquery <- list(\n  service=\"wfs\",\n  request=\"GetFeature\",\n  version = \"2.0.0\",\n  key=api_key,\n  typeNames = layer,\n  srsName = \"EPSG:27700\",\n  resultType = \"hits\",\n  bbox = bbox_bng #!xml filter \n  )\n\nhits <- httr::GET(base, path = path, query = query) |>\n  httr::content()\n\nNo encoding supplied: defaulting to UTF-8.\n\n(hits_r <- hits |>  xml2::xml_attrs() |> dplyr::nth(2) |> as.numeric())\n\n[1] 11\n\nN <- ceiling(hits_r/100)\n\nquery$resultType <- \"results\"\nquery$outputFormat = \"GeoJSON\"\n\nresults <- httr::GET(base, path = path, query = query) |>\n  sf::st_read(quiet = TRUE)\n\nNo encoding supplied: defaulting to UTF-8.\n\nresults |>\n  dplyr::as_tibble() |>\n  dplyr::group_by(Type) |>\n  dplyr::count(sort = TRUE)\n\n# A tibble: 2 × 2\n# Groups:   Type [2]\n  Type         n\n  <chr>    <int>\n1 Regional    10\n2 National     1\n\n\n\nlayer <- \"Zoomstack_DistrictBuildings\"\n#Query the hits\nquery <- list(\n  service=\"wfs\",\n  request=\"GetFeature\",\n  version = \"2.0.0\",\n  key=api_key,\n  typeNames = layer,\n  srsName = \"EPSG:27700\",\n  resultType = \"hits\",\n  bbox = bbox_bng #!xml filter \n  )\n\nhits <- httr::GET(base, path = path, query = query) |>\n  httr::content()\n\nNo encoding supplied: defaulting to UTF-8.\n\n(hits_r <- hits |>  xml2::xml_attrs() |> dplyr::nth(2) |> as.numeric())\n\n[1] 3346\n\nN <- ceiling(hits_r/100)\n\nquery$resultType <- \"results\"\nquery$outputFormat = \"GeoJSON\"\n\nresults <- httr::GET(base, path = path, query = query) |>\n  sf::st_read(quiet = TRUE)\n\nNo encoding supplied: defaulting to UTF-8."
  },
  {
    "objectID": "process-osm-data.html",
    "href": "process-osm-data.html",
    "title": "Process OSM Data",
    "section": "",
    "text": "Tidy Data\nExtract polygons, make sure they are WGS84 (EPSG:4326) projection, select id and name, join military and landuse data, filter distinct.\n\nlanduse_military_polygons <- \n  st_collection_extract(landuse_military, c(\"POLYGON\")) |>\n  st_transform(4326) |>\n  dplyr::select(osm_id, name)\n\nmilitary_polygons  <- military |>\n  st_collection_extract(c(\"POLYGON\")) |>\n  st_transform(4326) |>\n  dplyr::select(osm_id, name)\n\nmilitary_sites <- dplyr::bind_rows(landuse_military_polygons, military_polygons) |> dplyr::distinct() \n\nmilitary_sites |>\n  leaflet::leaflet() |>\n  leaflet::addTiles() |>\n  leaflet::addPolygons(popup = ~name, label = ~name)\n\n\n\n\n\n\n\n\nUnion Intersecting Polygons\nConvert to British National Grid (BNG), Buffer by 1m, determine intersecting polygons\n\nclusters <- military_sites |>\n  st_transform(27700) |>\n  st_buffer(1) |>\n  st_intersects() |>\n  graph_from_adj_list() |>\n  components()\n\nmilitary_sites$cluster <- clusters$membership\n\nCreate labels based on largest area that is not NA\n\nmilitary_sites <- military_sites |>\n  st_transform(27700) |>\n  dplyr::mutate(area = st_area(geometry)) |>\n  st_transform(4326)\n\ncluster_label <- military_sites |>\n  dplyr::group_by(cluster) |>\n  dplyr::filter(!is.na(name)) |>\n  dplyr::filter(area == max(area)) |>\n  dplyr::as_tibble() |>\n  dplyr::select(cluster, name) |>\n  dplyr::distinct(cluster, .keep_all = TRUE)\n\nCreate union of shapes in clusters and join labels\n\nmilitary_site_clusters <- military_sites |>\n  dplyr::group_by(cluster) |>\n  dplyr::summarise(geometry = st_union(geometry)) |>\n  dplyr::left_join(cluster_label, by = \"cluster\") |>\n  dplyr::select(cluster, name, geometry)\n\n\n\nUpload to PostGIS\n\ndb <- connect_postgres()\nst_write(military_site_clusters, db, \"military_site_clusters\")\n\nNote: method with signature 'DBIObject#sf' chosen for function 'dbDataType',\n target signature 'PqConnection#sf'.\n \"PqConnection#ANY\" would also be valid\n\nDBI::dbDisconnect(db)\n\n\n\nVisualise\n\ndb <- connect_postgres()\nmilitary_site_clusters <- st_read(db, \"military_site_clusters\")\nDBI::dbDisconnect(db)\nleaflet(military_site_clusters) |>\n  addTiles() |>\n  addPolygons(popup = ~name, label = ~name)"
  },
  {
    "objectID": "tidy-cluster-osm-sites.html",
    "href": "tidy-cluster-osm-sites.html",
    "title": "Tidy and Cluster OSM Military Sites",
    "section": "",
    "text": "Load Data\n\ndb <- connect_postgres()\nDBI::dbListTables(db)\n\n [1] \"geography_columns\"       \"geometry_columns\"       \n [3] \"spatial_ref_sys\"         \"mil_sites_geo\"          \n [5] \"mil_boundaries_osm\"      \"mil_build_os\"           \n [7] \"mil_bound_clust_osm\"     \"mil_build_features\"     \n [9] \"osm_mil_sites_clustered\" \"military_sites\"         \n[11] \"landuse_military_osm\"    \"military_osm\"           \n[13] \"mil_site_geo\"            \"sites_202024_20220826\"  \n[15] \"military_site_clusters\" \n\nmil_sites_osm <- st_read(db, \"military_sites\")\nloc_lon_lat <- db |> dplyr::tbl(\"mil_sites_geo\") |> dplyr::collect()\nDBI::dbDisconnect(db)\n\n\n\nCluster Military Sites\n\n# Filter Area > 100m\nsummary(mil_sites_osm$area)\n\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n        0        52       724    795544     19607 178425511 \n\nmil_sites_osm <- mil_sites_osm |> \n  dplyr::filter(area>=100) |>\n  dplyr::filter(!grepl(\"^WW2\", name))\n\n# Cluster Sites that are within 400m of each other\nclusters <- mil_sites_osm |> \n  st_transform(27700) |>\n  st_buffer(400) |>\n  st_intersects() |>\n  graph_from_adj_list() |>\n  components()\n\nmil_sites_osm$cluster <- clusters$membership\n\nsites_clustered <- mil_sites_osm |> \n  dplyr::group_by(cluster) |>\n  dplyr::summarise(geometry = st_union(geometry)) \n\nlabels <- mil_sites_osm |>\n  dplyr::as_tibble() |>\n  dplyr::group_by(cluster) |>\n  dplyr::filter(area == max(area)) |>\n  dplyr::select(cluster, name) |>\n  dplyr::arrange(cluster) |>\n  dplyr::distinct(cluster, .keep_all = TRUE) \n\n\nsites_clustered <- sites_clustered  |>\n  dplyr::left_join(labels, by = \"cluster\")\n\nsites_clustered <- sites_clustered |>\n  dplyr::select(cluster, name, geometry)\n\n\n\nUpload to PostGIS\n\ndb <- connect_postgres()\nst_write(sites_clustered, dsn = db, layer = \"osm_mil_sites_clustered\")\n\nNote: method with signature 'DBIObject#sf' chosen for function 'dbDataType',\n target signature 'PqConnection#sf'.\n \"PqConnection#ANY\" would also be valid\n\nDBI::dbDisconnect(db)"
  },
  {
    "objectID": "military-site-from-osm-bbox.html",
    "href": "military-site-from-osm-bbox.html",
    "title": "Download Specific Bounding Box from OSM",
    "section": "",
    "text": "Download Data\n\nbbox <- spdf |>\n  sf::st_transform(27700) |>\n  sf::st_buffer(2000) |>\n  sf::st_transform(4326) |>\n  sf::st_bbox() |>\n  as.numeric()\n\nlanduse_military <- osmdata::opq(bbox = bbox) |>  \n  osmdata::add_osm_feature(key = \"landuse\", value = \"military\") |>\n  osmdata::osmdata_sf()\n\nlanduse_military$osm_multipolygons |>\n  sf::st_transform(4326) |>\n\n  leaflet::leaflet() |>\n  leaflet::addTiles() |>\n  leaflet::addPolygons() \n\n\n\n\nlanduse_military$osm_polygons |>\n  leaflet::leaflet() |>\n  leaflet::addTiles() |>\n  leaflet::addPolygons(label = ~name)"
  },
  {
    "objectID": "os-api-mil-sites.html#bounding-box",
    "href": "os-api-mil-sites.html#bounding-box",
    "title": "Get Mil Sites from OS API",
    "section": "Bounding Box",
    "text": "Bounding Box\n\nlng1 <- -1.664772\nlat1 <- 51.722137\nlng2 <- -1.530704\nlat2 <- 51.777665\n\nbbox <- st_bbox(c(xmin = lng1, xmax = lng2, ymin = lat1, ymax = lat2), crs = 4326)\nbbox <- bbox |> st_as_sfc()\n\nleaflet(bbox) |>\n  addTiles() |>\n  addPolygons()\n\n\n\n\nbbox_bng <- st_transform(bbox, 27700)  |>\n  st_bbox() |>\n  as.numeric() |>\n  paste(collapse = \",\")"
  },
  {
    "objectID": "os-api-mil-sites.html#topographic-area",
    "href": "os-api-mil-sites.html#topographic-area",
    "title": "Get Mil Sites from OS API",
    "section": "Topographic Area",
    "text": "Topographic Area\n\nlayer <- \"Topography_TopographicArea\"\n\n# Query the hits\nquery <- list(\n  service=\"wfs\",\n  request=\"GetFeature\",\n  version = \"2.0.0\",\n  key=api_key,\n  typeNames = layer,\n  srsName = \"EPSG:27700\",\n  resultType = \"hits\",\n  startIndex = 1,\n  bbox = bbox_bng #!xml filter \n  )\n\nhits <- httr::GET(base, path = path, query = query) |>\n  httr::content()\n\nhits_r <- hits |>  \n  xml2::xml_attrs() |> \n  dplyr::nth(2) |> \n  as.numeric()\n\nN <- ceiling(hits_r/100)\n\n# Query the results\nquery$resultType <- \"results\"\nquery$outputFormat = \"GeoJSON\"\nquery$count <- 100 # needed for paging!\n\nresults <- purrr::map(1:N, ~{\n  query$startIndex = (.x-1)*100\n  httr::GET(base, path = path, query = query) |>\n    sf::st_read(quiet = TRUE) |> \n    suppressMessages() |> \n    suppressWarnings()\n})\n\nresults2 <- purrr::map(results, ~{\n  .x$BHATopoAreaVersion <- as.numeric(.x$BHATopoAreaVersion)\n  .x$AbsHMin <- as.numeric(.x$AbsHMin) \n  .x$AbsH2 <- as.numeric(.x$AbsH2) \n  .x$AbsHMax <- as.numeric(.x$AbsHMax) \n  .x$RelH2 <- as.numeric(.x$RelH2)\n  .x$RelHMax <- as.numeric(.x$RelHMax) \n  .x$BHAConf <- as.numeric(.x$BHAConf)\n  .x\n})\n\nresults2 <- results2 |> \n  dplyr::bind_rows()\n\nresults2 |>\n  dplyr::as_tibble() |>\n  dplyr::group_by(Theme, DescriptiveGroup, DescriptiveTerm) |>\n  dplyr::count(sort = TRUE)\n\nst_crs(results2) <- 27700"
  },
  {
    "objectID": "os-api-mil-sites.html#functional-site",
    "href": "os-api-mil-sites.html#functional-site",
    "title": "Get Mil Sites from OS API",
    "section": "Functional Site",
    "text": "Functional Site\n\nlayer <- \"Sites_FunctionalSite\"\n\n# Query the hits\nquery <- list(\n  service=\"wfs\",\n  request=\"GetFeature\",\n  version = \"2.0.0\",\n  key=api_key,\n  typeNames = layer,\n  srsName = \"EPSG:27700\",\n  resultType = \"hits\",\n  bbox = \"423224.8,202654.7,432514.1,208881.5\" #!xml filter \n  )\n\nhits <- httr::GET(base, path = path, query = query) |>\n  httr::content()\n\nNo encoding supplied: defaulting to UTF-8.\n\n(hits_r <- hits |>  xml2::xml_attrs() |> dplyr::nth(2) |> as.numeric())\n\n[1] 14\n\nN <- ceiling(hits_r/100)\n\n# Query the results\nquery$resultType <- \"results\"\nquery$outputFormat <- \"GeoJSON\"\nquery$count <- 100\n\nresults <- purrr::map_df(1:N, ~{\n  query$startIndex <- (.x-1)*100\n  httr::GET(base, path = path, query = query) |>\n  sf::st_read(quiet = TRUE) |>\n    suppressMessages() |>\n    suppressWarnings()\n})\n\nst_crs(results) <- 27700\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\nleaflet(results |> st_transform(4326)) |>\n  addTiles() |>\n  addPolygons(label = ~DistinctiveName1)"
  },
  {
    "objectID": "os-download-buildings.html",
    "href": "os-download-buildings.html",
    "title": "Download Buildings",
    "section": "",
    "text": "db <- connect_postgres()\nsites <- st_read(db, \"military_site_clusters\")\nDBI::dbDisconnect(db)\n\n\nsites <- sites |>\n  st_transform(27700) |>\n  dplyr::mutate(area = st_area(geometry)) |>\n  st_transform(4326) |>\n  dplyr::mutate(area_km = units::set_units(area, \"km^2\"))\n\n\nsites_filtered <- sites |>\n  dplyr::filter(area > units::as_units(1000, \"m^2\")) |>\n  dplyr::filter(!grepl(\"^WW\", name)) |>\n  dplyr::filter(area < units::as_units(5, \"km^2\"))\n\n\nsites_filtered[1,] |>\n  leaflet() |>\n  addTiles() |>\n  addPolygons()\n\n\n\n\n\n\nsites_filtered_bng <- sites_filtered |>\n  st_transform(27700) \n\nbbox <- purrr::map(sites_filtered_bng$geometry, ~{\n  st_bbox(.x)\n})\n\nbbox_df <- bbox |>\n  unlist() |>\n  matrix(ncol = 4, byrow = TRUE) |>\n  dplyr::as_tibble() |>\n  rlang::set_names(c(\"xmin\", \"ymin\", \"xmax\", \"ymax\")) |>\n  dplyr::bind_rows()\n\n\nfilter_xml <- function(\n    bbox_chr = \"436833.50,115334.90,437643.25,115761.50\",\n    descriptive_group = \"Building\"){\n  \n  glue::glue(\n  '<ogc:Filter>\n  <ogc:And>\n    <ogc:Within>\n      <PropertyName>SHAPE</PropertyName>\n      <gml:Box xmlns:gml=\"http://www.opengis.net/gml\" srsName=\"EPSG:27700\">\n        <gml:coordinates decimal=\".\" cs=\",\" ts=\",\">\n          {bbox_chr}\n        </gml:coordinates>\n      </gml:Box>\n    </ogc:Within>\n    <ogc:PropertyIsEqualTo>\n      <ogc:PropertyName>DescriptiveGroup</ogc:PropertyName>\n      <ogc:Literal>{descriptive_group}</ogc:Literal>\n    </ogc:PropertyIsEqualTo>\n  </ogc:And>\n</ogc:Filter>')\n  \n}\n\n# Function loops through the bounding boxes and extracts buildings\nmil_bld <- purrr::map(1:nrow(bbox_df), ~{\n  print(paste(.x, \"of\", nrow(bbox_df)))\n  chr <- bbox_df[.x,] |> unlist() |> as.numeric() |> paste(collapse = \",\")\n  xml <- filter_xml(chr)\n\n  layer <- \"Topography_TopographicArea\"\n  \n  # Get Hits\n  query <- list(\n    service=\"wfs\",\n    request=\"GetFeature\",\n    version = \"2.0.0\",\n    key= api_key,\n    typeNames = layer,\n    resultType = \"hits\",\n    srsName = \"EPSG:27700\",\n    filter = xml\n  )\n  \n  hits <- \n    tryCatch({\n      httr::GET(base, path = path, query = query) |>\n        httr::content()}, \n      error=function(e){\n        httr::GET(base, path = path, query = query) |>\n        httr::content()\n      }, finally = NA)\n  \n  if(is.na(hits)) return(NA)\n    \n  hits_r <- hits |>  \n    xml2::xml_attrs() |> \n    dplyr::nth(2) |> \n    as.numeric()\n    \n  N <- ceiling(hits_r/100)\n    \n  # Query the results\n  query$resultType <- \"results\"\n  query$outputFormat = \"GeoJSON\"\n  query$count <- 100 # needed for paging\n  \n  results <- purrr::map(1:N, ~{\n    query$startIndex = (.x-1)*100 # Starts from 0\n    tryCatch({\n      httr::GET(base, path = path, query = query) |>\n        sf::st_read(quiet = TRUE) |> \n        suppressMessages() |> \n        suppressWarnings()\n      }, error = function(e){\n        httr::GET(base, path = path, query = query) |> \n          sf::st_read(quiet = TRUE) |> \n          suppressMessages() |> \n          suppressWarnings()\n      }, finally = NA)\n  })\n  \n  if(length(results)==1 && is.na(results)) return(NA)\n  \n  results2 <- purrr::map(results, ~{\n    .x$BHATopoAreaVersion <- as.numeric(.x$BHATopoAreaVersion)\n    .x$AbsHMin <- as.numeric(.x$AbsHMin) \n    .x$AbsH2 <- as.numeric(.x$AbsH2) \n    .x$AbsHMax <- as.numeric(.x$AbsHMax) \n    .x$RelH2 <- as.numeric(.x$RelH2)\n    .x$RelHMax <- as.numeric(.x$RelHMax) \n    .x$BHAConf <- as.numeric(.x$BHAConf)\n    .x\n  })\n  \n  results3 <- results2 |> \n    dplyr::bind_rows() |>\n    dplyr::mutate(site_id = .x)\n  \n  site_n <- sites_filtered[.x, ]\n  st_crs(results3) <- 27700\n  results3 <- st_transform(results3, 4326)\n  \n  results3[site_n,]\n  })\n\n\nmissing <- mil_bld |> \n  purrr::map_lgl(~all(is.na(.x))) \n\n\nmil_bld2 <- mil_bld |>\n  dplyr::bind_rows() |>\n  dplyr::mutate(site_id = as.numeric(site_id)) |>\n  dplyr::left_join(\n    dplyr::tibble(\n      site_id = as.numeric(row.names(sites_filtered)), \n      cluster = as.numeric(sites_filtered$cluster)\n    ),\n    by = \"site_id\")\n\n\ndb <- connect_postgres()\nst_write(mil_bld2, db, \"military_buildings\")\nDBI::dbDisconnect(db)"
  },
  {
    "objectID": "landsat-api.html",
    "href": "landsat-api.html",
    "title": "Landsat API",
    "section": "",
    "text": "# Function to search through the api\ndataset_search <- function(\n    api_key, \n    payload = list(catalog = \"EE\", datasetName = \"Landsat\")\n    ){\n \n  base <- \"https://m2m.cr.usgs.gov/\"\n  path <- \"api/api/json/stable/dataset-search\"\n  \n  req <- httr::POST(\n    url = base, \n    path = path, \n    body = payload, \n    encode = \"json\",\n    httr::add_headers(`X-Auth-Token` = api_key)\n    )\n  \n  \n    if(req$status_code != 200) return(req$status_code)\n  \n  req |> \n    httr::content() |>\n    purrr::pluck(\"data\") |>\n    purrr::map_df(~dplyr::as_tibble(t(unlist(.x))))\n}\n\ndataset_search(api_key)\n\n# A tibble: 43 × 26\n   abstractText  acqui…¹ acqui…² catal…³ colle…⁴ colle…⁵ datas…⁶ datas…⁷ datas…⁸\n   <chr>         <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 \"The Landsat… 1984-0… 2021-1… EE      Burned… \"U.S. … 5e83a0… sp_til… Landsa…\n 2 \"This data s… 1984-0… 2021-1… EE      Dynami… \"U.S. … 5e83a0… sp_til… Landsa…\n 3 \"The USGS Ea… 1999-0… <NA>    EE      ETM+ (… \"Tri-D… 5e83a1… esat_e… Landsa…\n 4 \"The USGS Ea… 1999-0… <NA>    EE      ETM+ P… \"Tri-D… 5e83a1… esat_e… Landsa…\n 5 \"The U.S. Ge… 1999-0… <NA>    EE      ETM+ P… \"Tri-D… 5e83a1… ortho_… Landsa…\n 6 \"This data s… 1984-0… 2021-1… EE      Fracti… \"U.S. … 5e83a1… sp_til… Landsa…\n 7 \"The USGS Ea… 2002-0… <NA>    EE      GEOS-5… \"Lands… 5e83a1… geos_5… Landsa…\n 8 \"The U.S. Ge… 1999-0… 2006-1… EE      GLS LI… \"Lands… 5e83a1… lima    Landsa…\n 9 \"The NASA Ma… 2008-1… 2011-1… EE      GWELDM… \"NASA … 6079ce… gweldm… GWELD  \n10  <NA>         1984-0… 2001-1… EE      GWELDM… \"NASA … 609582… gweldm… GWELD  \n# … with 33 more rows, 17 more variables: dataOwner <chr>, dateUpdated <chr>,\n#   doiNumber <chr>, keywords <chr>, legacyId <chr>, sceneCount <chr>,\n#   spatialBounds.north <chr>, spatialBounds.east <chr>,\n#   spatialBounds.south <chr>, spatialBounds.west <chr>,\n#   temporalCoverage <chr>, supportCloudCover <chr>,\n#   supportDeletionSearch <chr>, ingestFrequency <chr>, catalogs1 <chr>,\n#   catalogs2 <chr>, catalogs3 <chr>, and abbreviated variable names …\n\n\n\nscene_search <- function(\n    api_key,\n    payload =  list(\n      datasetName = \"landsat_ot_c2_l2\",\n      startingNumber = 1,\n      maxResults = 1867,\n      sceneFilter = list(\n        spatialFilter = list(\n          filterType = \"mbr\", \n          lowerLeft = list(latitude = 49.959999905, longitude = -7.57216793459 ),\n          upperRight = list(latitude = 58.6350001085 , longitude =  1.68153079591)\n          ),\n        acquisitionFilter = list(\n          start = \"2021-08-31\",\n          end = \"2022-09-01\"\n          )\n        ))\n    ){\n    base <- \"https://m2m.cr.usgs.gov/\"\n    path <- \"api/api/json/stable/scene-search\"\n    \n    req <- httr::POST(\n    url = base, \n    path = path, \n    body = payload, \n    encode = \"json\",\n    httr::add_headers(`X-Auth-Token` = api_key)\n    )\n    \n    if(req$status_code != 200) return(req$status_code)\n    \n    httr_content <- req |>\n      httr::content() \n    \n     total_hits <- httr_content |> purrr::pluck(\"data\", \"totalHits\")\n     results <- httr_content |> purrr::pluck(\"data\", \"results\")\n     \n     purrr::map_df(results, ~unlist(.x))\n    }\n\nscene_search(api_key)\n\n# A tibble: 1,867 × 41\n   browse.id     brows…¹ brows…² brows…³ brows…⁴ brows…⁵ cloud…⁶ entit…⁷ displ…⁸\n   <chr>         <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 5fb4ba12d7ec… Level-… https:… https:… ls_chs  https:… 47.89   LC8204… LC08_L…\n 2 5fb4ba12d7ec… Level-… https:… https:… ls_chs  https:… 13.02   LC8204… LC08_L…\n 3 5fb4ba12d7ec… Level-… https:… https:… ls_chs  https:… 20.49   LC8204… LC08_L…\n 4 5fb4ba12d7ec… Level-… https:… https:… ls_chs  https:… 34.85   LC8204… LC08_L…\n 5 5fb4ba12d7ec… Level-… https:… https:… ls_chs  https:… 38.09   LC8204… LC08_L…\n 6 5fb4ba12d7ec… Level-… https:… https:… ls_chs  https:… 87.45   LC8204… LC08_L…\n 7 5fb4ba12d7ec… Level-… https:… https:… ls_chs  https:… 74.46   LC8204… LC08_L…\n 8 5fb4ba12d7ec… Level-… https:… https:… ls_chs  https:… 99.81   LC9205… LC09_L…\n 9 5fb4ba12d7ec… Level-… https:… https:… ls_chs  https:… 72.35   LC9205… LC09_L…\n10 5fb4ba12d7ec… Level-… https:… https:… ls_chs  https:… 59.52   LC9205… LC09_L…\n# … with 1,857 more rows, 32 more variables: options.bulk <chr>,\n#   options.download <chr>, options.order <chr>, options.secondary <chr>,\n#   selected.bulk <chr>, selected.compare <chr>, selected.order <chr>,\n#   spatialBounds.type <chr>, spatialBounds.coordinates1 <chr>,\n#   spatialBounds.coordinates2 <chr>, spatialBounds.coordinates3 <chr>,\n#   spatialBounds.coordinates4 <chr>, spatialBounds.coordinates5 <chr>,\n#   spatialBounds.coordinates6 <chr>, spatialBounds.coordinates7 <chr>, …\n\n\n\nentityId <- \"LC82040192022244LGN00\"\ndatasetAlias <- \"landsat_ot_c2_l2\"\npayload <- list(datasetName = datasetAlias, entityIds = entityId) # check with more than one\n\n# Requeste a machine account.\n# https://ers.cr.usgs.gov/profile/access\nreq <- httr::POST(\"https://m2m.cr.usgs.gov/api/api/json/stable/download-options\",\n                  body = payload, encode = \"json\",\n                  httr::add_headers(`X-Auth-Token` = api_key), httr::verbose()) \nreq$status_code\n\n[1] 403\n\n# https://m2m.cr.usgs.gov/api/docs/example/download_data-py\n\n\nlogout_usgs(api_key)\n\n[1] 200"
  },
  {
    "objectID": "primary-site-analysis.html",
    "href": "primary-site-analysis.html",
    "title": "Primary Site Analysis",
    "section": "",
    "text": "Fetch primary site locations\n\ndb <- connect_postgres()\nmil_sites <- st_read(db, \"military_site_clusters\")\nmil_sites <- mil_sites |> st_transform(4326)\n\nraf_mob <- c(\"RAF Coningsby\", \"RAF Marham\", \"RAF Lossiemouth\",\n             \"RAF Waddington\", \"RAF Brize Norton\",\n             \"RAF Benson\", \"RAF Odiham\")\n\nmil_sites_f <- mil_sites |> \n  dplyr::filter(name %in% raf_mob) |>\n  dplyr::group_by(name) |>\n  dplyr::summarise(geometry = st_union(geometry)) |>\n  dplyr::mutate(area = st_area(geometry)) |>\n  dplyr::mutate(area = round(units::set_units(area, \"km^2\"),2)) \n\nDBI::dbDisconnect(db)\n\n\n\nCheck which landsat images that the sites fall under\n\nwrs2d <- st_read(\"data/WRS2_descending_0/WRS2_descending.shp\")\n\nReading layer `WRS2_descending' from data source \n  `C:\\Users\\lukeh\\Documents\\quarto\\seven\\data\\WRS2_descending_0\\WRS2_descending.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 28892 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -180 ymin: -82.6401 xmax: 180 ymax: 82.6401\nGeodetic CRS:  WGS 84\n\nwrs2d <- st_transform(wrs2d, 4326)\n\nintersects <- st_intersects(mil_sites_f, wrs2d)\nindex <- unlist(intersects) |> unique() |> sort()\n(wrs2d_f <- wrs2d[index, c(\"PATH\", \"ROW\", \"PR\")])\n\nSimple feature collection with 7 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -6.32169 ymin: 50.7618 xmax: 2.79175 ymax: 58.2621\nGeodetic CRS:  WGS 84\n      PATH ROW     PR                       geometry\n3368   205  20 205020 MULTIPOLYGON (((-4.775483 5...\n6968   203  24 203024 MULTIPOLYGON (((-4.2758 51....\n10439  201  23 201023 MULTIPOLYGON (((-0.5901946 ...\n10440  201  24 201024 MULTIPOLYGON (((-1.18568 51...\n16016  206  20 206020 MULTIPOLYGON (((-6.320563 5...\n23211  202  23 202023 MULTIPOLYGON (((-2.135236 5...\n23212  202  24 202024 MULTIPOLYGON (((-2.730721 5...\n\nplot(wrs2d_f$geometry)\n\n\n\n\n\n\nExtract the least cloudy day between Apr - June\n\nextract_element <- function(x, n){\n  purrr::map_chr(stringr::str_split(x, \"_\"), ~.x[n])\n}\n\napi_key <- get_api_key()\nscenes <- scene_search(api_key)\nlogout_usgs(api_key)\n\n[1] 200\n\nscenes2 <- scenes |>\n  dplyr::select(cloudCover, entityId,displayId, \n                date  = temporalCoverage.startDate) |>\n  dplyr::mutate(date = as.Date(date)) |>\n  dplyr::mutate(path_row = extract_element(displayId, 3)) |>\n  dplyr::mutate(tier = extract_element(displayId, 7))\n\n\nPR  <- wrs2d_f |> dplyr::pull(PR) |> as.character()\n\nscenes2 |>\n  dplyr::filter(path_row %in% PR) |>\n  dplyr::filter(date >= \"2022-04-01\") |>\n  dplyr::filter(date < \"2022-07-01\") |>\n  dplyr::filter(substr(displayId, 1, 4) == \"LC09\") |>\n  dplyr::filter(tier == \"T1\") |>\n  dplyr::group_by(path_row) |>\n  dplyr::filter(cloudCover == min(cloudCover)) |>\n  dplyr::pull(displayId)\n\n[1] \"LC09_L2SP_202023_20220623_20220625_02_T1\"\n[2] \"LC09_L2SP_201023_20220616_20220701_02_T1\"\n[3] \"LC09_L2SP_201024_20220616_20220701_02_T1\"\n[4] \"LC09_L2SP_203024_20220614_20220616_02_T1\"\n[5] \"LC09_L2SP_206020_20220603_20220605_02_T1\"\n[6] \"LC09_L2SP_202024_20220522_20220524_02_T1\"\n[7] \"LC09_L2SP_205020_20220409_20220411_02_T1\"\n\n\n\n\nCreate bulk order\nA bulk order was created using EarthExplorer.\nThe Landsat 8-9 OLI/TIRS C2 L2 dataset was selected.\nDisplayId were inputted into the Landsat Product Identifier L2 field.\n\n\nCalculate NVDI and LST"
  },
  {
    "objectID": "pubs.html",
    "href": "pubs.html",
    "title": "Pubs Near Me",
    "section": "",
    "text": "library(ggmap)\n\nLoading required package: ggplot2\n\n\nGoogle's Terms of Service: https://cloud.google.com/maps-platform/terms/.\n\n\nPlease cite ggmap if you use it! See citation(\"ggmap\") for details.\n\nlibrary(leaflet)\nlibrary(osmdata)\n\nData (c) OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright\n\nlibrary(sf)\n\nLinking to GEOS 3.9.1, GDAL 3.4.3, PROJ 7.2.1; sf_use_s2() is TRUE\n\ng <- geocode(\"Bampton, Oxford\")\n\nSource : https://maps.googleapis.com/maps/api/geocode/json?address=Bampton,+Oxford&key=xxx\n\n# -1.549105 51.72345    \n\ndf <- data.frame(location = \"Bampton, Oxfordshire\", g)\nspdf <- sf::st_as_sf(df, coords = c(\"lon\", \"lat\"), crs = 4326)\nbuffer <- st_buffer(spdf, 10e3) \n\nbbox <- buffer |>\n  st_bbox() \n\nleaflet(buffer) |>\n  addTiles() |>\n  addPolygons()\n\n\n\n\nosm <- opq(bbox = as.numeric(bbox)) |>  \n      add_osm_feature(key = \"amenity\", value = \"pub\") |>\n      osmdata_sf()\n\npub_polys <- osm$osm_polygons\npub_points <- osm$osm_points\n\npoints_in_polys <- pub_points[pub_polys,]\n\npub_point_poly <- pub_points |>\n  dplyr::filter(!osm_id %in% points_in_polys$osm_id) |>\n  dplyr::select(osm_id, name) |>\n  dplyr::bind_rows(\n    pub_polys |>\n      dplyr::select(osm_id, name)\n  )\n\npub_point_poly |>\n  dplyr::as_tibble() |>\n  dplyr::group_by(name) |>\n  dplyr::count(sort = TRUE)\n\n# A tibble: 73 × 2\n# Groups:   name [73]\n   name                 n\n   <chr>            <int>\n 1 The Plough           4\n 2 <NA>                 4\n 3 The Swan             3\n 4 Royal Oak            2\n 5 The Angel            2\n 6 The Bell             2\n 7 Bell Inn             1\n 8 Carpenters Arms      1\n 9 Chequers             1\n10 Clanfield Tavern     1\n# … with 63 more rows"
  },
  {
    "objectID": "download-landsat-primary-sites.html",
    "href": "download-landsat-primary-sites.html",
    "title": "Bulk Download Primary Sites",
    "section": "",
    "text": "Fetch primary site locations\n\ndb <- connect_postgres()\nmil_sites <- st_read(db, \"military_site_clusters\")\nmil_sites <- mil_sites |> st_transform(4326)\n\nraf_mob <- c(\"RAF Coningsby\", \"RAF Marham\", \"RAF Lossiemouth\",\n             \"RAF Waddington\", \"RAF Brize Norton\",\n             \"RAF Benson\", \"RAF Odiham\")\n\nmil_sites_f <- mil_sites |> \n  dplyr::filter(name %in% raf_mob) |>\n  dplyr::group_by(name) |>\n  dplyr::summarise(geometry = st_union(geometry)) |>\n  dplyr::mutate(area = st_area(geometry)) |>\n  dplyr::mutate(area = round(units::set_units(area, \"km^2\"),2)) \n\nDBI::dbDisconnect(db)\n\n\n\nCheck which landsat images that the sites fall under\n\nwrs2d <- st_read(\"data/WRS2_descending_0/WRS2_descending.shp\")\n\nReading layer `WRS2_descending' from data source \n  `C:\\Users\\lukeh\\Documents\\quarto\\seven\\data\\WRS2_descending_0\\WRS2_descending.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 28892 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -180 ymin: -82.6401 xmax: 180 ymax: 82.6401\nGeodetic CRS:  WGS 84\n\nwrs2d <- st_transform(wrs2d, 4326)\n\nintersects <- st_intersects(mil_sites_f, wrs2d)\nindex <- unlist(intersects) |> unique() |> sort()\n(wrs2d_f <- wrs2d[index, c(\"PATH\", \"ROW\", \"PR\")])\n\nSimple feature collection with 7 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -6.32169 ymin: 50.7618 xmax: 2.79175 ymax: 58.2621\nGeodetic CRS:  WGS 84\n      PATH ROW     PR                       geometry\n3368   205  20 205020 MULTIPOLYGON (((-4.775483 5...\n6968   203  24 203024 MULTIPOLYGON (((-4.2758 51....\n10439  201  23 201023 MULTIPOLYGON (((-0.5901946 ...\n10440  201  24 201024 MULTIPOLYGON (((-1.18568 51...\n16016  206  20 206020 MULTIPOLYGON (((-6.320563 5...\n23211  202  23 202023 MULTIPOLYGON (((-2.135236 5...\n23212  202  24 202024 MULTIPOLYGON (((-2.730721 5...\n\nplot(wrs2d_f$geometry)\n\n\n\n\n\n\nExtract the least cloudy day between Apr - June\n\nextract_element <- function(x, n){\n  purrr::map_chr(stringr::str_split(x, \"_\"), ~.x[n])\n}\n\napi_key <- get_api_key()\nscenes <- scene_search(api_key)\nlogout_usgs(api_key)\n\n[1] 200\n\nscenes2 <- scenes |>\n  dplyr::select(cloudCover, entityId,displayId, \n                date  = temporalCoverage.startDate) |>\n  dplyr::mutate(date = as.Date(date)) |>\n  dplyr::mutate(path_row = extract_element(displayId, 3)) |>\n  dplyr::mutate(tier = extract_element(displayId, 7))\n\n\nPR  <- wrs2d_f |> dplyr::pull(PR) |> as.character()\n\nscenes2 |>\n  dplyr::filter(path_row %in% PR) |>\n  dplyr::filter(date >= \"2022-04-01\") |>\n  dplyr::filter(date < \"2022-07-01\") |>\n  dplyr::filter(substr(displayId, 1, 4) == \"LC09\") |>\n  dplyr::filter(tier == \"T1\") |>\n  dplyr::group_by(path_row) |>\n  dplyr::filter(cloudCover == min(cloudCover)) |>\n  dplyr::pull(displayId)\n\n[1] \"LC09_L2SP_202023_20220623_20220625_02_T1\"\n[2] \"LC09_L2SP_201023_20220616_20220701_02_T1\"\n[3] \"LC09_L2SP_201024_20220616_20220701_02_T1\"\n[4] \"LC09_L2SP_203024_20220614_20220616_02_T1\"\n[5] \"LC09_L2SP_206020_20220603_20220605_02_T1\"\n[6] \"LC09_L2SP_202024_20220522_20220524_02_T1\"\n[7] \"LC09_L2SP_205020_20220409_20220411_02_T1\"\n\n\n\n\nCreate bulk order\nA bulk order was created using EarthExplorer.\nThe Landsat 8-9 OLI/TIRS C2 L2 dataset was selected.\nDisplayId were inputted into the Landsat Product Identifier L2 field."
  },
  {
    "objectID": "acquire.html",
    "href": "acquire.html",
    "title": "Acquire",
    "section": "",
    "text": "List the process for extracting data from data sources."
  },
  {
    "objectID": "calculate-store-nvdi.html",
    "href": "calculate-store-nvdi.html",
    "title": "Calculate and Store NVDI",
    "section": "",
    "text": "Introduction\nThis script calculates normalized difference vegetation index (NDVI) for selected Landsat tiles and uploads it to a postgis database. To save the raster the postgis_raster needs to have been enabled using the following query.\nCREATE EXTENSION postgis_raster;\n\n\nSetup\n\nlibrary(raster)\nlibrary(rpostgis)\nlibrary(leaflet)\nsource(\"R/postgis.R\")\nsource(\"R/lst.R\")\n\n\n\nData\n\ncollection <- \"../../../OneDrive/Data/landsat/Product Bundles/\"\nd <- list.files(collection)\nd\n\n\n\nCalculate NVDI\nThe normalized difference vegetation index (NDVI) is a simple graphical indicator that can be used to analyze remote sensing measurements, often from a space platform, assessing whether or not the target being observed contains live green vegetation (Wikipedia).\n\nsystem.time({\n  nvdi_list <- purrr::map(d, ~{\n    f <- list.files(file.path(collection, .x))\n    \n    near_infrared_tif <- f[grepl(\"B5.TIF\", f)]\n    red_tif <- f[grepl(\"B4.TIF\", f)]\n  \n    near_infrared_tif <- file.path(collection, .x, near_infrared_tif)\n    red_tif <- file.path(collection, .x, red_tif)\n    \n    calculate_nvdi(near_infrared_tif, red_tif)\n\n    })\n  })\n\n# user  system elapsed \n# 83.44   16.46  102.61                          \n\n\ndb <- connect_postgres()\nfor(i in 1:length(nvdi_list)){\n  name <- paste0(\"NVDI\", d[i])\n  pgWriteRast(conn = db, name = name, raster = nvdi_list[[i]], overwrite = TRUE)\n\n}\nDBI::dbDisconnect(db)"
  },
  {
    "objectID": "raster-from-postgis.html",
    "href": "raster-from-postgis.html",
    "title": "Query Raster from PostGIS",
    "section": "",
    "text": "library(sf)\n\nLinking to GEOS 3.9.1, GDAL 3.4.3, PROJ 7.2.1; sf_use_s2() is TRUE\n\nlibrary(sp)\nlibrary(rpostgis)\n\nLoading required package: RPostgreSQL\n\n\nLoading required package: DBI\n\nsource(\"R/postgis.R\")\ndb <- connect_postgres()\nDBI::dbListTables(db)\n\n [1] \"raster_overviews\"                            \n [2] \"geography_columns\"                           \n [3] \"geometry_columns\"                            \n [4] \"spatial_ref_sys\"                             \n [5] \"mil_sites_geo\"                               \n [6] \"osm_mil_sites_clustered\"                     \n [7] \"NVDILC09_L2SP_203024_20220614_20220616_02_T1\"\n [8] \"raster_columns\"                              \n [9] \"NVDILC09_L2SP_202024_20220522_20220524_02_T1\"\n[10] \"NVDILC09_L2SP_205020_20220409_20220411_02_T1\"\n[11] \"mil_boundaries_osm\"                          \n[12] \"mil_build_os\"                                \n[13] \"mil_bound_clust_osm\"                         \n[14] \"mil_build_features\"                          \n[15] \"military_site_clusters\"                      \n[16] \"test\"                                        \n[17] \"military_sites\"                              \n[18] \"landuse_military_osm\"                        \n[19] \"military_osm\"                                \n[20] \"NVDILC09_L2SP_201023_20220616_20220701_02_T1\"\n[21] \"NVDILC09_L2SP_201024_20220616_20220701_02_T1\"\n[22] \"mil_site_geo\"                                \n[23] \"military_buildings\"                          \n[24] \"NVDILC09_L2SP_202023_20220623_20220625_02_T1\"\n[25] \"sites_202024_20220826\"                       \n[26] \"NVDILC09_L2SP_206020_20220603_20220605_02_T1\"\n\nsystem.time(\n  r <- pgGetRast(db, name = \"NVDILC09_L2SP_202024_20220522_20220524_02_T1\")\n)\n\n   user  system elapsed \n  41.91    3.45  103.97 \n\n# user  system elapsed \n# 38.69    3.31  102.92 \n\n# Extract bounding box\nlng1 <- -1.664772\nlat1 <- 51.722137\nlng2 <- -1.530704\nlat2 <- 51.777665\n\nbbox <- st_bbox(c(xmin = lng1, xmax = lng2, ymin = lat1, ymax = lat2), crs = 4326)\nbbox <- bbox |> st_as_sfc()\nbbox <- bbox |> st_transform(\"+proj=utm +zone=30 +datum=WGS84 +units=m +no_defs\")\nbbox <- bbox |> as(Class = \"Spatial\")\n\nsystem.time(\n  r2 <-  pgGetRast(db, name = \"NVDILC09_L2SP_202024_20220522_20220524_02_T1\", boundary = bbox)\n)\n\n   user  system elapsed \n    0.2     0.0     0.5 \n\n# user  system elapsed \n# 0.22    0.00    0.46 \n\nplot(r2)\n\n\n\nDBI::dbDisconnect(db)"
  },
  {
    "objectID": "cloud-cover-multisite.html",
    "href": "cloud-cover-multisite.html",
    "title": "Cloud Cover",
    "section": "",
    "text": "# Load the File that Corresponds to the Site Path\n\n# Clip to the Site\n\n# Calculate Cloud Cover\n\n# If more that one then select file with lowest cloud cover."
  },
  {
    "objectID": "usethis.html",
    "href": "usethis.html",
    "title": "Usethis",
    "section": "",
    "text": "No, not the popular R package. Place for final code."
  }
]